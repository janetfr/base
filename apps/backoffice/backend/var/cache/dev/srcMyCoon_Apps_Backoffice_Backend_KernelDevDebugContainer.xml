<?xml version="1.0" encoding="utf-8"?>
<container xmlns="http://symfony.com/schema/dic/services" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd">
  <parameters>
    <parameter key="kernel.root_dir">/var/www/html/apps/backoffice/backend/src</parameter>
    <parameter key="kernel.project_dir">/var/www/html/apps/backoffice/backend</parameter>
    <parameter key="kernel.environment">dev</parameter>
    <parameter key="kernel.debug">true</parameter>
    <parameter key="kernel.name">src</parameter>
    <parameter key="kernel.cache_dir">/var/www/html/apps/backoffice/backend/var/cache/dev</parameter>
    <parameter key="kernel.logs_dir">/var/www/html/apps/backoffice/backend/var/log</parameter>
    <parameter key="kernel.bundles" type="collection">
      <parameter key="NelmioCorsBundle">Nelmio\CorsBundle\NelmioCorsBundle</parameter>
      <parameter key="FrameworkBundle">Symfony\Bundle\FrameworkBundle\FrameworkBundle</parameter>
      <parameter key="FriendsOfBehatSymfonyExtensionBundle">FriendsOfBehat\SymfonyExtension\Bundle\FriendsOfBehatSymfonyExtensionBundle</parameter>
      <parameter key="SwiftmailerBundle">Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle</parameter>
      <parameter key="AwsBundle">Aws\Symfony\AwsBundle</parameter>
      <parameter key="KnpSnappyBundle">Knp\Bundle\SnappyBundle\KnpSnappyBundle</parameter>
      <parameter key="TwigBundle">Symfony\Bundle\TwigBundle\TwigBundle</parameter>
    </parameter>
    <parameter key="kernel.bundles_metadata" type="collection">
      <parameter key="NelmioCorsBundle" type="collection">
        <parameter key="path">/var/www/html/vendor/nelmio/cors-bundle</parameter>
        <parameter key="namespace">Nelmio\CorsBundle</parameter>
      </parameter>
      <parameter key="FrameworkBundle" type="collection">
        <parameter key="path">/var/www/html/vendor/symfony/framework-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\FrameworkBundle</parameter>
      </parameter>
      <parameter key="FriendsOfBehatSymfonyExtensionBundle" type="collection">
        <parameter key="path">/var/www/html/vendor/friends-of-behat/symfony-extension/src/Bundle</parameter>
        <parameter key="namespace">FriendsOfBehat\SymfonyExtension\Bundle</parameter>
      </parameter>
      <parameter key="SwiftmailerBundle" type="collection">
        <parameter key="path">/var/www/html/vendor/symfony/swiftmailer-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\SwiftmailerBundle</parameter>
      </parameter>
      <parameter key="AwsBundle" type="collection">
        <parameter key="path">/var/www/html/vendor/aws/aws-sdk-php-symfony/src</parameter>
        <parameter key="namespace">Aws\Symfony</parameter>
      </parameter>
      <parameter key="KnpSnappyBundle" type="collection">
        <parameter key="path">/var/www/html/vendor/knplabs/knp-snappy-bundle/src</parameter>
        <parameter key="namespace">Knp\Bundle\SnappyBundle</parameter>
      </parameter>
      <parameter key="TwigBundle" type="collection">
        <parameter key="path">/var/www/html/vendor/symfony/twig-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\TwigBundle</parameter>
      </parameter>
    </parameter>
    <parameter key="kernel.charset">UTF-8</parameter>
    <parameter key="kernel.container_class">srcMyCoon_Apps_Backoffice_Backend_KernelDevDebugContainer</parameter>
    <parameter key="container.dumper.inline_class_loader">true</parameter>
    <parameter key="container.dumper.inline_factories">true</parameter>
    <parameter key="domain">%env(DOMAIN)%</parameter>
    <parameter key="nelmio_cors.map" type="collection"/>
    <parameter key="nelmio_cors.defaults" type="collection">
      <parameter key="allow_origin" type="collection">
        <parameter>aasdasdsas</parameter>
      </parameter>
      <parameter key="allow_credentials">false</parameter>
      <parameter key="allow_headers" type="collection">
        <parameter>content-type</parameter>
        <parameter>authorization</parameter>
      </parameter>
      <parameter key="expose_headers" type="collection">
        <parameter>Link</parameter>
      </parameter>
      <parameter key="allow_methods" type="collection">
        <parameter>GET</parameter>
        <parameter>OPTIONS</parameter>
        <parameter>POST</parameter>
        <parameter>PUT</parameter>
        <parameter>PATCH</parameter>
        <parameter>DELETE</parameter>
      </parameter>
      <parameter key="max_age">3600</parameter>
      <parameter key="hosts" type="collection"/>
      <parameter key="origin_regex">true</parameter>
      <parameter key="forced_allow_origin_value">null</parameter>
    </parameter>
    <parameter key="nelmio_cors.cors_listener.class">Nelmio\CorsBundle\EventListener\CorsListener</parameter>
    <parameter key="nelmio_cors.options_resolver.class">Nelmio\CorsBundle\Options\Resolver</parameter>
    <parameter key="nelmio_cors.options_provider.config.class">Nelmio\CorsBundle\Options\ConfigProvider</parameter>
    <parameter key="event_dispatcher.event_aliases" type="collection">
      <parameter key="Symfony\Component\Console\Event\ConsoleCommandEvent">console.command</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleErrorEvent">console.error</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleTerminateEvent">console.terminate</parameter>
      <parameter key="Symfony\Component\Form\Event\PreSubmitEvent">form.pre_submit</parameter>
      <parameter key="Symfony\Component\Form\Event\SubmitEvent">form.submit</parameter>
      <parameter key="Symfony\Component\Form\Event\PostSubmitEvent">form.post_submit</parameter>
      <parameter key="Symfony\Component\Form\Event\PreSetDataEvent">form.pre_set_data</parameter>
      <parameter key="Symfony\Component\Form\Event\PostSetDataEvent">form.post_set_data</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ControllerArgumentsEvent">kernel.controller_arguments</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ControllerEvent">kernel.controller</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ResponseEvent">kernel.response</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\FinishRequestEvent">kernel.finish_request</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\RequestEvent">kernel.request</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ViewEvent">kernel.view</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ExceptionEvent">kernel.exception</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\TerminateEvent">kernel.terminate</parameter>
      <parameter key="Symfony\Component\Workflow\Event\GuardEvent">workflow.guard</parameter>
      <parameter key="Symfony\Component\Workflow\Event\LeaveEvent">workflow.leave</parameter>
      <parameter key="Symfony\Component\Workflow\Event\TransitionEvent">workflow.transition</parameter>
      <parameter key="Symfony\Component\Workflow\Event\EnterEvent">workflow.enter</parameter>
      <parameter key="Symfony\Component\Workflow\Event\EnteredEvent">workflow.entered</parameter>
      <parameter key="Symfony\Component\Workflow\Event\CompletedEvent">workflow.completed</parameter>
      <parameter key="Symfony\Component\Workflow\Event\AnnounceEvent">workflow.announce</parameter>
    </parameter>
    <parameter key="fragment.renderer.hinclude.global_template"></parameter>
    <parameter key="fragment.path">/_fragment</parameter>
    <parameter key="kernel.secret">%env(APP_SECRET)%</parameter>
    <parameter key="kernel.http_method_override">true</parameter>
    <parameter key="kernel.trusted_hosts" type="collection"/>
    <parameter key="kernel.default_locale">en</parameter>
    <parameter key="kernel.error_controller">error_controller</parameter>
    <parameter key="templating.helper.code.file_link_format">null</parameter>
    <parameter key="debug.file_link_format">null</parameter>
    <parameter key="session.metadata.storage_key">_sf2_meta</parameter>
    <parameter key="session.storage.options" type="collection">
      <parameter key="cache_limiter" type="string">0</parameter>
      <parameter key="cookie_secure">auto</parameter>
      <parameter key="cookie_httponly">true</parameter>
      <parameter key="cookie_samesite">lax</parameter>
      <parameter key="gc_probability">1</parameter>
    </parameter>
    <parameter key="session.save_path">/var/www/html/apps/backoffice/backend/var/cache/dev/sessions</parameter>
    <parameter key="session.metadata.update_threshold">0</parameter>
    <parameter key="translator.logging">false</parameter>
    <parameter key="translator.default_path">/var/www/html/apps/backoffice/backend/translations</parameter>
    <parameter key="data_collector.templates" type="collection"/>
    <parameter key="debug.error_handler.throw_at">-1</parameter>
    <parameter key="debug.container.dump">/var/www/html/apps/backoffice/backend/var/cache/dev/srcMyCoon_Apps_Backoffice_Backend_KernelDevDebugContainer.xml</parameter>
    <parameter key="router.request_context.host">localhost</parameter>
    <parameter key="router.request_context.scheme">http</parameter>
    <parameter key="router.request_context.base_url"></parameter>
    <parameter key="router.resource">kernel::loadRoutes</parameter>
    <parameter key="router.cache_class_prefix">srcMyCoon_Apps_Backoffice_Backend_KernelDevDebugContainer</parameter>
    <parameter key="request_listener.http_port">80</parameter>
    <parameter key="request_listener.https_port">443</parameter>
    <parameter key="serializer.mapping.cache.file">/var/www/html/apps/backoffice/backend/var/cache/dev/serialization.php</parameter>
    <parameter key="swiftmailer.mailer.default.transport.name">dynamic</parameter>
    <parameter key="swiftmailer.spool.default.memory.path">/var/www/html/apps/backoffice/backend/var/cache/dev/swiftmailer/spool/default</parameter>
    <parameter key="swiftmailer.mailer.default.spool.enabled">true</parameter>
    <parameter key="swiftmailer.mailer.default.plugin.impersonate">null</parameter>
    <parameter key="swiftmailer.mailer.default.single_address">null</parameter>
    <parameter key="swiftmailer.mailer.default.delivery.enabled">true</parameter>
    <parameter key="swiftmailer.spool.enabled">true</parameter>
    <parameter key="swiftmailer.delivery.enabled">true</parameter>
    <parameter key="swiftmailer.single_address">null</parameter>
    <parameter key="swiftmailer.mailers" type="collection">
      <parameter key="default">swiftmailer.mailer.default</parameter>
    </parameter>
    <parameter key="swiftmailer.default_mailer">default</parameter>
    <parameter key="aws_sdk.class">Aws\Sdk</parameter>
    <parameter key="knp_snappy.pdf.binary">/usr/bin/wkhtmltopdf</parameter>
    <parameter key="knp_snappy.pdf.options" type="collection">
      <parameter key="viewport-size">1024x768</parameter>
      <parameter key="page-size">A4</parameter>
    </parameter>
    <parameter key="knp_snappy.pdf.env" type="collection"/>
    <parameter key="knp_snappy.image.binary">%env(WKHTMLTOIMAGE_PATH)%</parameter>
    <parameter key="knp_snappy.image.options" type="collection"/>
    <parameter key="knp_snappy.image.env" type="collection"/>
    <parameter key="twig.exception_listener.controller">null</parameter>
    <parameter key="twig.form.resources" type="collection">
      <parameter>form_div_layout.html.twig</parameter>
    </parameter>
    <parameter key="twig.default_path">/var/www/html/apps/backoffice/backend/templates</parameter>
    <parameter key="console.command.ids" type="collection"/>
  </parameters>
  <services>
    <service id="service_container" class="Symfony\Component\DependencyInjection\ContainerInterface" public="true" synthetic="true"/>
    <service id="kernel" class="MyCoon\Apps\Backoffice\Backend\Kernel" public="true" synthetic="true">
      <tag name="routing.route_loader"/>
    </service>
    <service id="Doctrine\ODM\MongoDB\DocumentManager" class="Doctrine\ODM\MongoDB\DocumentManager" public="true">
      <tag name="MyCoon.database_connection"/>
      <argument type="collection">
        <argument key="driver">%env(BACKOFFICE_DATABASE_DRIVER)%</argument>
        <argument key="host">%env(BACKOFFICE_DATABASE_HOST)%</argument>
        <argument key="port">%env(BACKOFFICE_DATABASE_PORT)%</argument>
        <argument key="dbname">%env(BACKOFFICE_DATABASE_NAME)%</argument>
        <argument key="user">%env(BACKOFFICE_DATABASE_USER)%</argument>
        <argument key="password">%env(BACKOFFICE_DATABASE_PASSWORD)%</argument>
      </argument>
      <argument>%env(APP_ENV)%</argument>
      <factory class="MyCoon\Backoffice\Shared\Infrastructure\Doctrine\BackofficeDocumentManagerFactory" method="create"/>
    </service>
    <service id="MyCoon\Apps\Backoffice\Backend\Controller\BaseController" class="MyCoon\Apps\Backoffice\Backend\Controller\BaseController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <argument type="service" id="serializer"/>
    </service>
    <service id="MyCoon\Apps\Backoffice\Backend\Controller\User\UserAuthenticatePostController" class="MyCoon\Apps\Backoffice\Backend\Controller\User\UserAuthenticatePostController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <argument type="service" id="MyCoon\Shared\Infrastructure\Bus\Query\InMemorySymfonyQueryBus"/>
      <argument type="service" id="serializer"/>
    </service>
    <service id="MyCoon\Apps\Backoffice\Backend\Controller\User\UserCreatePostController" class="MyCoon\Apps\Backoffice\Backend\Controller\User\UserCreatePostController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <argument type="service" id="MyCoon\Shared\Infrastructure\Bus\Command\InMemorySymfonyCommandBus"/>
      <argument type="service" id="serializer"/>
    </service>
    <service id="MyCoon\Apps\Backoffice\Backend\Controller\User\UserCurrentGetController" class="MyCoon\Apps\Backoffice\Backend\Controller\User\UserCurrentGetController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <argument type="service" id="MyCoon\Shared\Infrastructure\Bus\Query\InMemorySymfonyQueryBus"/>
      <argument type="service" id="serializer"/>
    </service>
    <service id="MyCoon\Backoffice\Shared\Infrastructure\Doctrine\BackofficeDocumentManagerFactory" class="MyCoon\Backoffice\Shared\Infrastructure\Doctrine\BackofficeDocumentManagerFactory" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Backoffice\Shared\Infrastructure\Doctrine\BackofficeEntityManagerFactory" class="MyCoon\Backoffice\Shared\Infrastructure\Doctrine\BackofficeEntityManagerFactory" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Backoffice\Shared\Infrastructure\Doctrine\DbalTypesSearcher" class="MyCoon\Backoffice\Shared\Infrastructure\Doctrine\DbalTypesSearcher" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Backoffice\Shared\Infrastructure\Doctrine\DoctrinePrefixesSearcher" class="MyCoon\Backoffice\Shared\Infrastructure\Doctrine\DoctrinePrefixesSearcher" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Backoffice\User\Application\Authentication\AuthenticateUserCommand" class="MyCoon\Backoffice\User\Application\Authentication\AuthenticateUserCommand" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Backoffice\User\Application\Authentication\AuthenticateUserCommandHandler" class="MyCoon\Backoffice\User\Application\Authentication\AuthenticateUserCommandHandler" autowire="true" autoconfigure="true">
      <tag name="MyCoon.command_handler"/>
      <argument type="service" id="MyCoon\Backoffice\User\Infrastructure\DoctrineUserRepository"/>
    </service>
    <service id="MyCoon\Backoffice\User\Application\Create\CreateUserCommand" class="MyCoon\Backoffice\User\Application\Create\CreateUserCommand" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Backoffice\User\Application\Create\CreateUserCommandHandler" class="MyCoon\Backoffice\User\Application\Create\CreateUserCommandHandler" autowire="true" autoconfigure="true">
      <tag name="MyCoon.command_handler"/>
      <argument type="service" id="MyCoon\Backoffice\User\Infrastructure\DoctrineUserRepository"/>
      <argument type="service" id="MyCoon\Shared\Infrastructure\Bus\Event\InMemory\InMemorySymfonyEventBus"/>
    </service>
    <service id="MyCoon\Backoffice\User\Application\Find\FindUserQuery" class="MyCoon\Backoffice\User\Application\Find\FindUserQuery" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Backoffice\User\Application\Find\FindUserQueryHandler" class="MyCoon\Backoffice\User\Application\Find\FindUserQueryHandler" autowire="true" autoconfigure="true">
      <tag name="MyCoon.query_handler"/>
      <argument type="service" id="MyCoon\Backoffice\User\Infrastructure\DoctrineUserRepository"/>
    </service>
    <service id="MyCoon\Backoffice\User\Application\GetUserByToken\GetUserByTokenQuery" class="MyCoon\Backoffice\User\Application\GetUserByToken\GetUserByTokenQuery" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Backoffice\User\Application\GetUserByToken\GetUserByTokenQueryHandler" class="MyCoon\Backoffice\User\Application\GetUserByToken\GetUserByTokenQueryHandler" autowire="true" autoconfigure="true">
      <tag name="MyCoon.query_handler"/>
      <argument type="service" id="MyCoon\Backoffice\User\Infrastructure\DoctrineUserRepository"/>
    </service>
    <service id="MyCoon\Backoffice\User\Application\GetUserByToken\GetUserByTokenResponse" class="MyCoon\Backoffice\User\Application\GetUserByToken\GetUserByTokenResponse" autowire="true" autoconfigure="true">
      <argument type="service" id="MyCoon\Backoffice\User\Domain\User"/>
    </service>
    <service id="MyCoon\Backoffice\User\Application\Search\SearchUserQuery" class="MyCoon\Backoffice\User\Application\Search\SearchUserQuery" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Backoffice\User\Application\Search\SearchUserQueryHandler" class="MyCoon\Backoffice\User\Application\Search\SearchUserQueryHandler" autowire="true" autoconfigure="true">
      <tag name="MyCoon.query_handler"/>
      <argument type="service" id="MyCoon\Backoffice\User\Infrastructure\DoctrineUserRepository"/>
    </service>
    <service id="MyCoon\Backoffice\User\Domain\SimpleUserCreatedDomainEvent" class="MyCoon\Backoffice\User\Domain\SimpleUserCreatedDomainEvent" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Backoffice\User\Domain\User" class="MyCoon\Backoffice\User\Domain\User" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Backoffice\User\Domain\UserResponse" class="MyCoon\Backoffice\User\Domain\UserResponse" autowire="true" autoconfigure="true">
      <argument type="service" id="MyCoon\Backoffice\User\Domain\User"/>
    </service>
    <service id="MyCoon\Backoffice\User\Infrastructure\DoctrineUserRepository" class="MyCoon\Backoffice\User\Infrastructure\DoctrineUserRepository" autowire="true" autoconfigure="true">
      <argument type="service" id="Doctrine\ODM\MongoDB\DocumentManager"/>
    </service>
    <service id="MyCoon\Shared\Domain\Assert" class="MyCoon\Shared\Domain\Assert" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Domain\Criteria\Criteria" class="MyCoon\Shared\Domain\Criteria\Criteria" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Domain\Criteria\Filter" class="MyCoon\Shared\Domain\Criteria\Filter" autowire="true" autoconfigure="true">
      <argument type="service" id="MyCoon\Shared\Domain\Criteria\FilterField"/>
      <argument type="service" id="MyCoon\Shared\Domain\Criteria\FilterOperator"/>
      <argument type="service" id="MyCoon\Shared\Domain\Criteria\FilterValue"/>
    </service>
    <service id="MyCoon\Shared\Domain\Criteria\FilterField" class="MyCoon\Shared\Domain\Criteria\FilterField" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Domain\Criteria\FilterOperator" class="MyCoon\Shared\Domain\Criteria\FilterOperator" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Domain\Criteria\FilterValue" class="MyCoon\Shared\Domain\Criteria\FilterValue" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Domain\Criteria\Filters" class="MyCoon\Shared\Domain\Criteria\Filters" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Domain\Criteria\Order" class="MyCoon\Shared\Domain\Criteria\Order" autowire="true" autoconfigure="true">
      <argument type="service" id="MyCoon\Shared\Domain\Criteria\OrderBy"/>
      <argument type="service" id="MyCoon\Shared\Domain\Criteria\OrderType"/>
    </service>
    <service id="MyCoon\Shared\Domain\Criteria\OrderBy" class="MyCoon\Shared\Domain\Criteria\OrderBy" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Domain\Criteria\OrderType" class="MyCoon\Shared\Domain\Criteria\OrderType" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Domain\SlugGenerate" class="MyCoon\Shared\Domain\SlugGenerate" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Domain\Utils" class="MyCoon\Shared\Domain\Utils" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Domain\ValueObject\Uuid" class="MyCoon\Shared\Domain\ValueObject\Uuid" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Bus\CallableFirstParameterExtractor" class="MyCoon\Shared\Infrastructure\Bus\CallableFirstParameterExtractor" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Bus\Command\CommandNotRegisteredError" class="MyCoon\Shared\Infrastructure\Bus\Command\CommandNotRegisteredError" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Bus\Command\InMemorySymfonyCommandBus" class="MyCoon\Shared\Infrastructure\Bus\Command\InMemorySymfonyCommandBus" autowire="true" autoconfigure="true">
      <argument type="tagged_iterator" tag="MyCoon.command_handler"/>
    </service>
    <service id="MyCoon\Shared\Infrastructure\Bus\Event\DomainEventJsonDeserializer" class="MyCoon\Shared\Infrastructure\Bus\Event\DomainEventJsonDeserializer" autowire="true" autoconfigure="true">
      <argument type="service" id="MyCoon\Shared\Infrastructure\Bus\Event\DomainEventMapping"/>
    </service>
    <service id="MyCoon\Shared\Infrastructure\Bus\Event\DomainEventJsonSerializer" class="MyCoon\Shared\Infrastructure\Bus\Event\DomainEventJsonSerializer" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Bus\Event\DomainEventMapping" class="MyCoon\Shared\Infrastructure\Bus\Event\DomainEventMapping" autowire="true" autoconfigure="true">
      <argument type="tagged_iterator" tag="MyCoon.domain_event_subscriber"/>
    </service>
    <service id="MyCoon\Shared\Infrastructure\Bus\Event\DomainEventSubscriberLocator" class="MyCoon\Shared\Infrastructure\Bus\Event\DomainEventSubscriberLocator" autowire="true" autoconfigure="true">
      <argument type="tagged_iterator" tag="MyCoon.domain_event_subscriber"/>
    </service>
    <service id="MyCoon\Shared\Infrastructure\Bus\Event\InMemory\InMemorySymfonyEventBus" class="MyCoon\Shared\Infrastructure\Bus\Event\InMemory\InMemorySymfonyEventBus" lazy="true" autowire="true" autoconfigure="true">
      <argument type="tagged_iterator" tag="MyCoon.domain_event_subscriber"/>
    </service>
    <service id="MyCoon\Shared\Infrastructure\Bus\Event\MySql\MySqlDoctrineDomainEventsConsumer" class="MyCoon\Shared\Infrastructure\Bus\Event\MySql\MySqlDoctrineDomainEventsConsumer" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Bus\Event\MySql\MySqlDoctrineEventBus" class="MyCoon\Shared\Infrastructure\Bus\Event\MySql\MySqlDoctrineEventBus" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConfigurer" class="MyCoon\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConfigurer" autowire="true" autoconfigure="true">
      <argument type="service" id="MyCoon\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConnection"/>
    </service>
    <service id="MyCoon\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConnection" class="MyCoon\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConnection" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqDomainEventsConsumer" class="MyCoon\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqDomainEventsConsumer" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventBus" class="MyCoon\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventBus" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqExchangeNameFormatter" class="MyCoon\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqExchangeNameFormatter" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqQueueNameFormatter" class="MyCoon\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqQueueNameFormatter" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Bus\Query\InMemorySymfonyQueryBus" class="MyCoon\Shared\Infrastructure\Bus\Query\InMemorySymfonyQueryBus" autowire="true" autoconfigure="true">
      <argument type="tagged_iterator" tag="MyCoon.query_handler"/>
    </service>
    <service id="MyCoon\Shared\Infrastructure\Bus\Query\QueryNotRegisteredError" class="MyCoon\Shared\Infrastructure\Bus\Query\QueryNotRegisteredError" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Doctrine\DatabaseConnections" class="MyCoon\Shared\Infrastructure\Doctrine\DatabaseConnections" autowire="true" autoconfigure="true">
      <argument type="tagged_iterator" tag="MyCoon.database_connection"/>
    </service>
    <service id="MyCoon\Shared\Infrastructure\Doctrine\Dbal\DbalCustomTypesRegistrar" class="MyCoon\Shared\Infrastructure\Doctrine\Dbal\DbalCustomTypesRegistrar" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Doctrine\DoctrineEntityManagerFactory" class="MyCoon\Shared\Infrastructure\Doctrine\DoctrineEntityManagerFactory" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Elasticsearch\ElasticsearchClient" class="MyCoon\Shared\Infrastructure\Elasticsearch\ElasticsearchClient" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Elasticsearch\ElasticsearchClientFactory" class="MyCoon\Shared\Infrastructure\Elasticsearch\ElasticsearchClientFactory" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Logger\MonologLogger" class="MyCoon\Shared\Infrastructure\Logger\MonologLogger" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Persistence\Doctrine\DoctrineCriteriaConverter" class="MyCoon\Shared\Infrastructure\Persistence\Doctrine\DoctrineCriteriaConverter" autowire="true" autoconfigure="true">
      <argument type="service" id="MyCoon\Shared\Domain\Criteria\Criteria"/>
    </service>
    <service id="MyCoon\Shared\Infrastructure\Persistence\Elasticsearch\ElasticQueryGenerator" class="MyCoon\Shared\Infrastructure\Persistence\Elasticsearch\ElasticQueryGenerator" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Persistence\Elasticsearch\ElasticsearchCriteriaConverter" class="MyCoon\Shared\Infrastructure\Persistence\Elasticsearch\ElasticsearchCriteriaConverter" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Persistence\MongoBD\MongoDBRepository" class="MyCoon\Shared\Infrastructure\Persistence\MongoBD\MongoDBRepository" autowire="true" autoconfigure="true">
      <argument type="service" id="Doctrine\ODM\MongoDB\DocumentManager"/>
    </service>
    <service id="MyCoon\Shared\Infrastructure\PhpRandomNumberGenerator" class="MyCoon\Shared\Infrastructure\PhpRandomNumberGenerator" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Symfony\AddJsonBodyToRequestListener" class="MyCoon\Shared\Infrastructure\Symfony\AddJsonBodyToRequestListener" autowire="true" autoconfigure="true">
      <tag name="kernel.event_listener" event="kernel.request" method="onKernelRequest"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="MyCoon\Shared\Infrastructure\Symfony\ApiExceptionListener" class="MyCoon\Shared\Infrastructure\Symfony\ApiExceptionListener" autowire="true" autoconfigure="true">
      <argument type="service" id="MyCoon\Shared\Infrastructure\Symfony\ApiExceptionsHttpStatusCodeMapping"/>
    </service>
    <service id="MyCoon\Shared\Infrastructure\Symfony\ApiExceptionsHttpStatusCodeMapping" class="MyCoon\Shared\Infrastructure\Symfony\ApiExceptionsHttpStatusCodeMapping" autowire="true" autoconfigure="true"/>
    <service id="MyCoon\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware" class="MyCoon\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware" public="true" autowire="true" autoconfigure="true">
      <tag name="kernel.event_listener" event="kernel.request" method="onKernelRequest"/>
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="MyCoon\Shared\Infrastructure\Bus\Query\InMemorySymfonyQueryBus"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.vdmMuyE.MyCoon\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware"/>
      </call>
    </service>
    <service id="MyCoon\Shared\Infrastructure\Symfony\FlashSession" class="MyCoon\Shared\Infrastructure\Symfony\FlashSession" autowire="true" autoconfigure="true">
      <argument type="service" id="session"/>
    </service>
    <service id="MyCoon\Shared\Infrastructure\Symfony\SymfonyUserLogged" class="MyCoon\Shared\Infrastructure\Symfony\SymfonyUserLogged" autowire="true" autoconfigure="true">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="MyCoon\Apps\Backoffice\Backend\Command\SendSoundNotificationCommand" class="MyCoon\Apps\Backoffice\Backend\Command\SendSoundNotificationCommand" autowire="true" autoconfigure="true">
      <tag name="console.command" command="app:send-sound-notification"/>
      <call method="setName">
        <argument>app:send-sound-notification</argument>
      </call>
    </service>
    <service id="MyCoon\Apps\Backoffice\Backend\Command\SendSMSToUserCommand" class="MyCoon\Apps\Backoffice\Backend\Command\SendSMSToUserCommand" autowire="true" autoconfigure="true">
      <tag name="console.command" command="app:send-sms-to-user"/>
      <call method="setName">
        <argument>app:send-sms-to-user</argument>
      </call>
    </service>
    <service id="MyCoon\Apps\Backoffice\Backend\Command\PatchMeetingCommand" class="MyCoon\Apps\Backoffice\Backend\Command\PatchMeetingCommand" autowire="true" autoconfigure="true">
      <tag name="console.command" command="app:patch-meeting"/>
      <call method="setName">
        <argument>app:patch-meeting</argument>
      </call>
    </service>
    <service id="MyCoon\Apps\Backoffice\Backend\Command\PatchDuplicatePersonCommand" class="MyCoon\Apps\Backoffice\Backend\Command\PatchDuplicatePersonCommand" autowire="true" autoconfigure="true">
      <tag name="console.command" command="app:patch-duplicate-person"/>
      <call method="setName">
        <argument>app:patch-duplicate-person</argument>
      </call>
    </service>
    <service id="MyCoon\Apps\Backoffice\Backend\Command\PatchSchoolTypeCommand" class="MyCoon\Apps\Backoffice\Backend\Command\PatchSchoolTypeCommand" autowire="true" autoconfigure="true">
      <tag name="console.command" command="app:patch-school-type"/>
      <call method="setName">
        <argument>app:patch-school-type</argument>
      </call>
    </service>
    <service id="nelmio_cors.cors_listener" class="Nelmio\CorsBundle\EventListener\CorsListener">
      <tag name="kernel.event_listener" event="kernel.request" method="onKernelRequest" priority="250"/>
      <tag name="kernel.event_listener" event="kernel.response" method="onKernelResponse" priority="0"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="nelmio_cors.options_resolver"/>
    </service>
    <service id="nelmio_cors.options_resolver" class="Nelmio\CorsBundle\Options\Resolver" public="false">
      <argument type="collection">
        <argument type="service" id="nelmio_cors.options_provider.config"/>
      </argument>
    </service>
    <service id="nelmio_cors.options_provider.config" class="Nelmio\CorsBundle\Options\ConfigProvider">
      <tag name="nelmio_cors.options_provider" priority="-1"/>
      <argument type="collection"/>
      <argument>%nelmio_cors.defaults%</argument>
    </service>
    <service id="nelmio_cors.cacheable_response_vary_listener" class="Nelmio\CorsBundle\EventListener\CacheableResponseVaryListener">
      <tag name="kernel.event_listener" event="kernel.response" method="onResponse"/>
      <tag name="container.hot_path"/>
    </service>
    <service id=".legacy_controller_name_converter" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser" public="false">
      <tag name="monolog.logger" channel="request"/>
      <argument type="service" id="kernel"/>
      <argument>false</argument>
    </service>
    <service id="controller_resolver" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver" public="false">
      <tag name="monolog.logger" channel="request"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument type="service" id=".legacy_controller_name_converter"/>
    </service>
    <service id="argument_metadata_factory" class="Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory" public="false"/>
    <service id="argument_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver" public="false">
      <argument type="service" id="argument_metadata_factory"/>
      <argument type="iterator">
        <argument type="service" id="argument_resolver.request_attribute"/>
        <argument type="service" id="argument_resolver.request"/>
        <argument type="service" id="argument_resolver.session"/>
        <argument type="service" id="argument_resolver.service"/>
        <argument type="service" id="argument_resolver.default"/>
        <argument type="service" id="argument_resolver.variadic"/>
      </argument>
    </service>
    <service id="argument_resolver.request_attribute" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="100"/>
    </service>
    <service id="argument_resolver.request" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="50"/>
    </service>
    <service id="argument_resolver.session" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="50"/>
    </service>
    <service id="argument_resolver.service" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="-50"/>
      <argument type="service" id=".service_locator.lu7FCdF"/>
    </service>
    <service id="argument_resolver.default" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="-100"/>
    </service>
    <service id="argument_resolver.variadic" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="-150"/>
    </service>
    <service id="response_listener" class="Symfony\Component\HttpKernel\EventListener\ResponseListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument>UTF-8</argument>
    </service>
    <service id="streamed_response_listener" class="Symfony\Component\HttpKernel\EventListener\StreamedResponseListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="locale_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="request_stack"/>
      <argument>en</argument>
      <argument type="service" id="router.default" on-invalid="ignore"/>
    </service>
    <service id="validate_request_listener" class="Symfony\Component\HttpKernel\EventListener\ValidateRequestListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id=".legacy_resolve_controller_name_subscriber" class="Symfony\Bundle\FrameworkBundle\EventListener\ResolveControllerNameSubscriber" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id=".legacy_controller_name_converter"/>
      <argument>false</argument>
    </service>
    <service id="disallow_search_engine_index_response_listener" class="Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="error_controller" class="Symfony\Component\HttpKernel\Controller\ErrorController" public="true">
      <argument type="service" id="http_kernel"/>
      <argument>error_controller</argument>
      <argument type="service" id="error_handler.error_renderer.serializer"/>
    </service>
    <service id="exception_listener" class="Symfony\Component\HttpKernel\EventListener\ErrorListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <tag name="container.hot_path"/>
      <argument>error_controller</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>true</argument>
    </service>
    <service id="parameter_bag" class="Symfony\Component\DependencyInjection\ParameterBag\ContainerBag" public="false">
      <argument type="service" id="service_container"/>
    </service>
    <service id="event_dispatcher" class="Symfony\Component\EventDispatcher\EventDispatcher" public="true">
      <tag name="container.hot_path"/>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="MyCoon\Shared\Infrastructure\Symfony\AddJsonBodyToRequestListener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="MyCoon\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="nelmio_cors.cors_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>250</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="nelmio_cors.cors_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="nelmio_cors.cacheable_response_vary_listener"/>
          <argument>onResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="streamed_response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-1024</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>setDefaultLocale</argument>
        </argument>
        <argument>100</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>16</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="validate_request_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id=".legacy_resolve_controller_name_subscriber"/>
          <argument>resolveControllerName</argument>
        </argument>
        <argument>24</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="disallow_search_engine_index_response_listener"/>
          <argument>onResponse</argument>
        </argument>
        <argument>-255</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>onControllerArguments</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>logKernelException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_aware_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>15</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_aware_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>-15</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.error_listener"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.error_listener"/>
          <argument>onConsoleTerminate</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.suggest_missing_package_subscriber"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="session_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="session_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-1000</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="session_listener"/>
          <argument>onFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Messenger\Event\WorkerMessageFailedEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="messenger.retry.send_failed_message_for_retry_listener"/>
          <argument>onMessageFailed</argument>
        </argument>
        <argument>100</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Messenger\Event\WorkerStartedEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="messenger.listener.stop_worker_on_restart_signal_listener"/>
          <argument>onWorkerStarted</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Messenger\Event\WorkerRunningEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="messenger.listener.stop_worker_on_restart_signal_listener"/>
          <argument>onWorkerRunning</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>32</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-64</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="swiftmailer.email_sender.listener"/>
          <argument>onException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.terminate</argument>
        <argument type="collection">
          <argument type="service_closure" id="swiftmailer.email_sender.listener"/>
          <argument>onTerminate</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service_closure" id="swiftmailer.email_sender.listener"/>
          <argument>onException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service_closure" id="swiftmailer.email_sender.listener"/>
          <argument>onTerminate</argument>
        </argument>
        <argument>0</argument>
      </call>
    </service>
    <service id="http_kernel" class="Symfony\Component\HttpKernel\HttpKernel" public="true">
      <tag name="container.hot_path"/>
      <argument type="service" id="event_dispatcher"/>
      <argument type="service" id="controller_resolver"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="argument_resolver"/>
    </service>
    <service id="request_stack" class="Symfony\Component\HttpFoundation\RequestStack" public="true"/>
    <service id="url_helper" class="Symfony\Component\HttpFoundation\UrlHelper" public="false">
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
    </service>
    <service id="cache_warmer" class="Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate" public="true">
      <argument type="tagged_iterator" tag="kernel.cache_warmer"/>
      <argument>true</argument>
      <argument>/var/www/html/apps/backoffice/backend/var/cache/dev/srcMyCoon_Apps_Backoffice_Backend_KernelDevDebugContainerDeprecations.log</argument>
    </service>
    <service id="cache_clearer" class="Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer" public="true">
      <argument type="tagged_iterator" tag="kernel.cache_clearer"/>
    </service>
    <service id="filesystem" class="Symfony\Component\Filesystem\Filesystem" public="true"/>
    <service id="file_locator" class="Symfony\Component\HttpKernel\Config\FileLocator" public="false">
      <argument type="service" id="kernel"/>
      <argument>/var/www/html/apps/backoffice/backend/src/Resources</argument>
      <argument type="collection">
        <argument>/var/www/html/apps/backoffice/backend/src</argument>
      </argument>
      <argument>false</argument>
    </service>
    <service id="uri_signer" class="Symfony\Component\HttpKernel\UriSigner" public="false">
      <argument>%env(APP_SECRET)%</argument>
    </service>
    <service id="config_cache_factory" class="Symfony\Component\Config\ResourceCheckerConfigCacheFactory" public="false">
      <argument type="tagged_iterator" tag="config_cache.resource_checker"/>
    </service>
    <service id="dependency_injection.config.container_parameters_resource_checker" class="Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker" public="false">
      <tag name="config_cache.resource_checker" priority="-980"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="config.resource.self_checking_resource_checker" class="Symfony\Component\Config\Resource\SelfCheckingResourceChecker" public="false">
      <tag name="config_cache.resource_checker" priority="-990"/>
    </service>
    <service id="services_resetter" class="Symfony\Component\HttpKernel\DependencyInjection\ServicesResetter" public="true">
      <argument type="iterator">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
        <argument key="cache.messenger.restart_workers_signal" type="service" id="cache.messenger.restart_workers_signal" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.transport.in_memory.factory" type="service" id="messenger.transport.in_memory.factory" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.email_sender.listener" type="service" id="swiftmailer.email_sender.listener" on-invalid="ignore_uninitialized"/>
      </argument>
      <argument type="collection">
        <argument key="cache.app" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.system" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.validator" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.serializer" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.annotations" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.property_info" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.messenger.restart_workers_signal" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="messenger.transport.in_memory.factory" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="swiftmailer.email_sender.listener" type="collection">
          <argument>reset</argument>
        </argument>
      </argument>
    </service>
    <service id="reverse_container" class="Symfony\Component\DependencyInjection\ReverseContainer" public="false">
      <argument type="service" id="service_container"/>
      <argument type="service" id=".service_locator.wnlveDj"/>
    </service>
    <service id="locale_aware_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleAwareListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="iterator">
        <argument type="service" id="translator.default"/>
      </argument>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="container.env_var_processor" class="Symfony\Component\DependencyInjection\EnvVarProcessor" public="false">
      <tag name="container.env_var_processor"/>
      <argument type="service" id="service_container"/>
      <argument type="tagged_iterator" tag="container.env_var_loader"/>
    </service>
    <service id="fragment.handler" class="Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler" public="false">
      <argument type="service" id=".service_locator._cmka45"/>
      <argument type="service" id="request_stack"/>
      <argument>true</argument>
    </service>
    <service id="fragment.renderer.inline" class="Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer" public="false">
      <tag name="kernel.fragment_renderer" alias="inline"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="event_dispatcher"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id=".2_~5TZ36aY" public="false">
      <argument type="service" id="request_stack"/>
      <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer" method="getAndCleanOutputBuffer"/>
    </service>
    <service id=".1_~5TZ36aY" public="false">
      <argument type="service" id="request_stack"/>
      <argument>true</argument>
      <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer" method="isDebug"/>
    </service>
    <service id="error_handler.error_renderer.html" class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer">
      <argument type="service" id=".1_~5TZ36aY"/>
      <argument>UTF-8</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <argument>/var/www/html/apps/backoffice/backend</argument>
      <argument type="service" id=".2_~5TZ36aY"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="console.error_listener" class="Symfony\Component\Console\EventListener\ErrorListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="console"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="console.suggest_missing_package_subscriber" class="Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber" public="false">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="console.command.about" class="Symfony\Bundle\FrameworkBundle\Command\AboutCommand" public="false">
      <tag name="console.command" command="about"/>
      <call method="setName">
        <argument>about</argument>
      </call>
    </service>
    <service id="console.command.assets_install" class="Symfony\Bundle\FrameworkBundle\Command\AssetsInstallCommand" public="false">
      <tag name="console.command" command="assets:install"/>
      <argument type="service" id="filesystem"/>
      <argument>/var/www/html/apps/backoffice/backend</argument>
      <call method="setName">
        <argument>assets:install</argument>
      </call>
    </service>
    <service id="console.command.cache_clear" class="Symfony\Bundle\FrameworkBundle\Command\CacheClearCommand" public="false">
      <tag name="console.command" command="cache:clear"/>
      <argument type="service" id="cache_clearer"/>
      <argument type="service" id="filesystem"/>
      <call method="setName">
        <argument>cache:clear</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_clear" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolClearCommand" public="false">
      <tag name="console.command" command="cache:pool:clear"/>
      <argument type="service" id="cache.global_clearer"/>
      <call method="setName">
        <argument>cache:pool:clear</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_prune" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand" public="false">
      <tag name="console.command" command="cache:pool:prune"/>
      <argument type="iterator"/>
      <call method="setName">
        <argument>cache:pool:prune</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_delete" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolDeleteCommand" public="false">
      <tag name="console.command" command="cache:pool:delete"/>
      <argument type="service" id="cache.global_clearer"/>
      <call method="setName">
        <argument>cache:pool:delete</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_list" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolListCommand" public="false">
      <tag name="console.command" command="cache:pool:list"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.annotations</argument>
        <argument>cache.property_info</argument>
        <argument>cache.messenger.restart_workers_signal</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:list</argument>
      </call>
    </service>
    <service id="console.command.cache_warmup" class="Symfony\Bundle\FrameworkBundle\Command\CacheWarmupCommand" public="false">
      <tag name="console.command" command="cache:warmup"/>
      <argument type="service" id="cache_warmer"/>
      <call method="setName">
        <argument>cache:warmup</argument>
      </call>
    </service>
    <service id="console.command.config_debug" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDebugCommand" public="false">
      <tag name="console.command" command="debug:config"/>
      <call method="setName">
        <argument>debug:config</argument>
      </call>
    </service>
    <service id="console.command.config_dump_reference" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDumpReferenceCommand" public="false">
      <tag name="console.command" command="config:dump-reference"/>
      <call method="setName">
        <argument>config:dump-reference</argument>
      </call>
    </service>
    <service id="console.command.container_debug" class="Symfony\Bundle\FrameworkBundle\Command\ContainerDebugCommand" public="false">
      <tag name="console.command" command="debug:container"/>
      <call method="setName">
        <argument>debug:container</argument>
      </call>
    </service>
    <service id="console.command.container_lint" class="Symfony\Bundle\FrameworkBundle\Command\ContainerLintCommand" public="false">
      <tag name="console.command" command="lint:container"/>
      <call method="setName">
        <argument>lint:container</argument>
      </call>
    </service>
    <service id="console.command.debug_autowiring" class="Symfony\Bundle\FrameworkBundle\Command\DebugAutowiringCommand" public="false">
      <tag name="console.command" command="debug:autowiring"/>
      <argument>null</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:autowiring</argument>
      </call>
    </service>
    <service id="console.command.event_dispatcher_debug" class="Symfony\Bundle\FrameworkBundle\Command\EventDispatcherDebugCommand" public="false">
      <tag name="console.command" command="debug:event-dispatcher"/>
      <argument type="service" id="event_dispatcher"/>
      <call method="setName">
        <argument>debug:event-dispatcher</argument>
      </call>
    </service>
    <service id="console.command.messenger_consume_messages" class="Symfony\Component\Messenger\Command\ConsumeMessagesCommand" public="false">
      <tag name="console.command" command="messenger:consume"/>
      <tag name="console.command" command="messenger:consume-messages"/>
      <tag name="monolog.logger" channel="messenger"/>
      <argument type="service" id="messenger.routable_message_bus"/>
      <argument type="service" id="messenger.receiver_locator"/>
      <argument type="service" id="event_dispatcher"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument type="collection"/>
      <call method="setName">
        <argument>messenger:consume</argument>
      </call>
      <call method="setAliases">
        <argument type="collection">
          <argument>messenger:consume-messages</argument>
        </argument>
      </call>
    </service>
    <service id="console.command.messenger_setup_transports" class="Symfony\Component\Messenger\Command\SetupTransportsCommand" public="false">
      <tag name="console.command" command="messenger:setup-transports"/>
      <argument type="service" id="messenger.receiver_locator"/>
      <argument type="collection"/>
      <call method="setName">
        <argument>messenger:setup-transports</argument>
      </call>
    </service>
    <service id="console.command.messenger_debug" class="Symfony\Component\Messenger\Command\DebugCommand" public="false">
      <tag name="console.command" command="debug:messenger"/>
      <argument type="collection">
        <argument key="messenger.bus.default" type="collection"/>
      </argument>
      <call method="setName">
        <argument>debug:messenger</argument>
      </call>
    </service>
    <service id="console.command.messenger_stop_workers" class="Symfony\Component\Messenger\Command\StopWorkersCommand" public="false">
      <tag name="console.command" command="messenger:stop-workers"/>
      <argument type="service" id="cache.messenger.restart_workers_signal"/>
      <call method="setName">
        <argument>messenger:stop-workers</argument>
      </call>
    </service>
    <service id="console.command.router_debug" class="Symfony\Bundle\FrameworkBundle\Command\RouterDebugCommand" public="false">
      <tag name="console.command" command="debug:router"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:router</argument>
      </call>
    </service>
    <service id="console.command.router_match" class="Symfony\Bundle\FrameworkBundle\Command\RouterMatchCommand" public="false">
      <tag name="console.command" command="router:match"/>
      <argument type="service" id="router.default"/>
      <call method="setName">
        <argument>router:match</argument>
      </call>
    </service>
    <service id="console.command.translation_debug" class="Symfony\Bundle\FrameworkBundle\Command\TranslationDebugCommand" public="false">
      <tag name="console.command" command="debug:translation"/>
      <argument type="service" id="translator.default"/>
      <argument type="service" id="translation.reader"/>
      <argument type="service" id="translation.extractor"/>
      <argument>/var/www/html/apps/backoffice/backend/translations</argument>
      <argument>/var/www/html/apps/backoffice/backend/templates</argument>
      <argument type="collection"/>
      <argument type="collection">
        <argument>/var/www/html/vendor/symfony/twig-bridge/Resources/views/Email</argument>
      </argument>
      <call method="setName">
        <argument>debug:translation</argument>
      </call>
    </service>
    <service id="console.command.translation_update" class="Symfony\Bundle\FrameworkBundle\Command\TranslationUpdateCommand" public="false">
      <tag name="console.command" command="translation:update"/>
      <argument type="service" id="translation.writer"/>
      <argument type="service" id="translation.reader"/>
      <argument type="service" id="translation.extractor"/>
      <argument>en</argument>
      <argument>/var/www/html/apps/backoffice/backend/translations</argument>
      <argument>/var/www/html/apps/backoffice/backend/templates</argument>
      <argument type="collection"/>
      <argument type="collection">
        <argument>/var/www/html/vendor/symfony/twig-bridge/Resources/views/Email</argument>
      </argument>
      <call method="setName">
        <argument>translation:update</argument>
      </call>
    </service>
    <service id="console.command.xliff_lint" class="Symfony\Bundle\FrameworkBundle\Command\XliffLintCommand" public="false">
      <tag name="console.command" command="lint:xliff"/>
      <call method="setName">
        <argument>lint:xliff</argument>
      </call>
    </service>
    <service id="console.command.yaml_lint" class="Symfony\Bundle\FrameworkBundle\Command\YamlLintCommand" public="false">
      <tag name="console.command" command="lint:yaml"/>
      <call method="setName">
        <argument>lint:yaml</argument>
      </call>
    </service>
    <service id="console.command.secrets_set" class="Symfony\Bundle\FrameworkBundle\Command\SecretsSetCommand" public="false">
      <tag name="console.command" command="secrets:set"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:set</argument>
      </call>
    </service>
    <service id="console.command.secrets_remove" class="Symfony\Bundle\FrameworkBundle\Command\SecretsRemoveCommand" public="false">
      <tag name="console.command" command="secrets:remove"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:remove</argument>
      </call>
    </service>
    <service id="console.command.secrets_generate_key" class="Symfony\Bundle\FrameworkBundle\Command\SecretsGenerateKeysCommand" public="false">
      <tag name="console.command" command="secrets:generate-keys"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:generate-keys</argument>
      </call>
    </service>
    <service id="console.command.secrets_list" class="Symfony\Bundle\FrameworkBundle\Command\SecretsListCommand" public="false">
      <tag name="console.command" command="secrets:list"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:list</argument>
      </call>
    </service>
    <service id="console.command.secrets_decrypt_to_local" class="Symfony\Bundle\FrameworkBundle\Command\SecretsDecryptToLocalCommand" public="false">
      <tag name="console.command" command="secrets:decrypt-to-local"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:decrypt-to-local</argument>
      </call>
    </service>
    <service id="console.command.secrets_encrypt_from_local" class="Symfony\Bundle\FrameworkBundle\Command\SecretsEncryptFromLocalCommand" public="false">
      <tag name="console.command" command="secrets:encrypt-from-local"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:encrypt-from-local</argument>
      </call>
    </service>
    <service id="cache.app" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>y1hx2L5GWx</argument>
      <argument>0</argument>
      <argument>/var/www/html/apps/backoffice/backend/var/cache/dev/pools</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.app.simple" class="Symfony\Component\Cache\Psr16Cache" public="false">
      <argument type="service" id="cache.app"/>
      <deprecated>The "Psr\SimpleCache\CacheInterface" / "%service_id%" service is deprecated since Symfony 4.3. Use "Symfony\Contracts\Cache\CacheInterface" / "cache.app" instead.</deprecated>
    </service>
    <service id="cache.app.taggable" class="Symfony\Component\Cache\Adapter\TagAwareAdapter" public="false">
      <argument type="service" id="cache.app"/>
    </service>
    <service id="cache.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>KYw5ESBTVb</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/html/apps/backoffice/backend/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.validator" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>hZ4CyWKeeL</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/html/apps/backoffice/backend/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.serializer" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>yAPTwNahmN</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/html/apps/backoffice/backend/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.annotations" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>f4kbvMsh8L</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/html/apps/backoffice/backend/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.property_info" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>hAkY08+WSk</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/html/apps/backoffice/backend/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.messenger.restart_workers_signal" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="false">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>8Oiural7ZK</argument>
      <argument>0</argument>
      <argument>/var/www/html/apps/backoffice/backend/var/cache/dev/pools</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.system_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/html/apps/backoffice/backend/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.adapter.apcu" class="Symfony\Component\Cache\Adapter\ApcuAdapter" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.doctrine" class="Symfony\Component\Cache\Adapter\DoctrineAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_doctrine_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.filesystem" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>/var/www/html/apps/backoffice/backend/var/cache/dev/pools</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.psr6" class="Symfony\Component\Cache\Adapter\ProxyAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_psr6_provider" clearer="cache.default_clearer" reset="reset"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
    </service>
    <service id="cache.adapter.redis" class="Symfony\Component\Cache\Adapter\RedisAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_redis_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.memcached" class="Symfony\Component\Cache\Adapter\MemcachedAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_memcached_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.pdo" class="Symfony\Component\Cache\Adapter\PdoAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_pdo_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="collection"/>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.array" class="Symfony\Component\Cache\Adapter\ArrayAdapter" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.default_marshaller" class="Symfony\Component\Cache\Marshaller\DefaultMarshaller" public="false">
      <argument>null</argument>
    </service>
    <service id="cache.default_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="false">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.messenger.restart_workers_signal" type="service" id="cache.messenger.restart_workers_signal" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.system_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <tag name="kernel.cache_clearer"/>
      <argument type="collection">
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.global_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
        <argument key="cache.messenger.restart_workers_signal" type="service" id="cache.messenger.restart_workers_signal" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="identity_translator" class="Symfony\Component\Translation\IdentityTranslator" public="false"/>
    <service id="translator.selector" class="Symfony\Component\Translation\MessageSelector" public="false">
      <deprecated>The "%service_id%" service is deprecated since Symfony 4.2, use "identity_translator" instead.</deprecated>
    </service>
    <service id=".cache_connection.GD_MSZC" class="Symfony\Component\Cache\Adapter\AbstractAdapter" public="false">
      <argument>redis://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createConnection"/>
    </service>
    <service id=".cache_connection.JKE6keX" class="Symfony\Component\Cache\Adapter\AbstractAdapter" public="false">
      <argument>memcached://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createConnection"/>
    </service>
    <service id=".1_NativeFileSessionHandler~DvV_kmW" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler" public="false">
      <argument>/var/www/html/apps/backoffice/backend/var/cache/dev/sessions</argument>
    </service>
    <service id="session" class="Symfony\Component\HttpFoundation\Session\Session" public="true">
      <argument type="service" id="session.storage.native"/>
    </service>
    <service id="session.storage.metadata_bag" class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag" public="false">
      <argument>_sf2_meta</argument>
      <argument>0</argument>
    </service>
    <service id="session.storage.native" class="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage" public="false">
      <argument>%session.storage.options%</argument>
      <argument>null</argument>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.storage.php_bridge" class="Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage" public="false">
      <argument>null</argument>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.flash_bag" class="Symfony\Component\HttpFoundation\Session\Flash\FlashBag" public="false">
      <factory service="session" method="getFlashBag"/>
    </service>
    <service id="session.attribute_bag" class="Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag" public="false">
      <argument>attributes</argument>
      <factory service="session" method="getBag"/>
    </service>
    <service id="session.storage.mock_file" class="Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage" public="false">
      <argument>/var/www/html/apps/backoffice/backend/var/cache/dev/sessions</argument>
      <argument>MOCKSESSID</argument>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.handler.native_file" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler" public="false">
      <argument type="service" id=".1_NativeFileSessionHandler~DvV_kmW"/>
    </service>
    <service id="session.abstract_handler" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler" public="false">
      <argument></argument>
      <factory class="Symfony\Component\HttpFoundation\Session\Storage\Handler\SessionHandlerFactory" method="createHandler"/>
    </service>
    <service id="session_listener" class="Symfony\Component\HttpKernel\EventListener\SessionListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id=".service_locator.Bppmeg3"/>
    </service>
    <service id="session.save_listener" class="Symfony\Component\HttpKernel\EventListener\SaveSessionListener" public="false">
      <deprecated>The "%service_id%" service is deprecated since Symfony 4.1. Use the "session_listener" service instead.</deprecated>
    </service>
    <service id="messenger.senders_locator" class="Symfony\Component\Messenger\Transport\Sender\SendersLocator" public="false">
      <argument type="collection"/>
      <argument type="service" id=".service_locator.I3K77mT"/>
    </service>
    <service id="messenger.middleware.send_message" class="Symfony\Component\Messenger\Middleware\SendMessageMiddleware" public="false">
      <tag name="monolog.logger" channel="messenger"/>
      <argument type="service" id="messenger.senders_locator"/>
      <argument type="service" id="event_dispatcher"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="messenger.transport.native_php_serializer" class="Symfony\Component\Messenger\Transport\Serialization\PhpSerializer" public="false"/>
    <service id="messenger.middleware.handle_message" class="Symfony\Component\Messenger\Middleware\HandleMessageMiddleware" public="false" abstract="true">
      <tag name="monolog.logger" channel="messenger"/>
      <argument></argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="messenger.middleware.add_bus_name_stamp_middleware" class="Symfony\Component\Messenger\Middleware\AddBusNameStampMiddleware" public="false" abstract="true"/>
    <service id="messenger.middleware.dispatch_after_current_bus" class="Symfony\Component\Messenger\Middleware\DispatchAfterCurrentBusMiddleware" public="false"/>
    <service id="messenger.middleware.validation" class="Symfony\Component\Messenger\Middleware\ValidationMiddleware" public="false">
      <argument type="service" id="validator"/>
    </service>
    <service id="messenger.middleware.reject_redelivered_message_middleware" class="Symfony\Component\Messenger\Middleware\RejectRedeliveredMessageMiddleware" public="false"/>
    <service id="messenger.middleware.failed_message_processing_middleware" class="Symfony\Component\Messenger\Middleware\FailedMessageProcessingMiddleware" public="false"/>
    <service id="messenger.middleware.traceable" class="Symfony\Component\Messenger\Middleware\TraceableMiddleware" public="false" abstract="true">
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="messenger.receiver_locator" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id="messenger.transport_factory" class="Symfony\Component\Messenger\Transport\TransportFactory" public="false">
      <argument type="tagged_iterator" tag="messenger.transport_factory"/>
    </service>
    <service id="messenger.transport.sync.factory" class="Symfony\Component\Messenger\Transport\Sync\SyncTransportFactory" public="false">
      <tag name="messenger.transport_factory"/>
      <argument type="service" id="messenger.routable_message_bus"/>
    </service>
    <service id="messenger.transport.in_memory.factory" class="Symfony\Component\Messenger\Transport\InMemoryTransportFactory" public="false">
      <tag name="messenger.transport_factory"/>
      <tag name="kernel.reset" method="reset"/>
    </service>
    <service id="messenger.retry_strategy_locator" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id="messenger.retry.abstract_multiplier_retry_strategy" class="Symfony\Component\Messenger\Retry\MultiplierRetryStrategy" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
    </service>
    <service id="messenger.retry.send_failed_message_for_retry_listener" class="Symfony\Component\Messenger\EventListener\SendFailedMessageForRetryListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="messenger"/>
      <argument type="service" id=".service_locator.I3K77mT"/>
      <argument type="service" id="messenger.retry_strategy_locator"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
    </service>
    <service id="messenger.listener.dispatch_pcntl_signal_listener" class="Symfony\Component\Messenger\EventListener\DispatchPcntlSignalListener" public="false">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="messenger.listener.stop_worker_on_restart_signal_listener" class="Symfony\Component\Messenger\EventListener\StopWorkerOnRestartSignalListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="messenger"/>
      <argument type="service" id="cache.messenger.restart_workers_signal"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
    </service>
    <service id="messenger.listener.stop_worker_on_sigterm_signal_listener" class="Symfony\Component\Messenger\EventListener\StopWorkerOnSigtermSignalListener" public="false">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="messenger.routable_message_bus" class="Symfony\Component\Messenger\RoutableMessageBus" public="false">
      <argument type="service" id=".service_locator.CCTmIC0"/>
      <argument type="service" id="messenger.bus.default"/>
    </service>
    <service id="messenger.bus.default" class="Symfony\Component\Messenger\MessageBus">
      <tag name="messenger.bus"/>
      <argument type="iterator">
        <argument type="service" id="messenger.bus.default.middleware.add_bus_name_stamp_middleware"/>
        <argument type="service" id="messenger.middleware.reject_redelivered_message_middleware"/>
        <argument type="service" id="messenger.middleware.dispatch_after_current_bus"/>
        <argument type="service" id="messenger.middleware.failed_message_processing_middleware"/>
        <argument type="service" id="messenger.middleware.send_message"/>
        <argument type="service" id="messenger.bus.default.middleware.handle_message"/>
      </argument>
    </service>
    <service id=".service_locator.I3K77mT" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id="http_client" class="Symfony\Contracts\HttpClient\HttpClientInterface">
      <tag name="monolog.logger" channel="http_client"/>
      <tag name="http_client.client"/>
      <argument type="collection"/>
      <argument>6</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
      <factory class="Symfony\Component\HttpClient\HttpClient" method="create"/>
    </service>
    <service id="psr18.http_client" class="Symfony\Component\HttpClient\Psr18Client">
      <argument type="service" id="http_client"/>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="translator.default" class="Symfony\Bundle\FrameworkBundle\Translation\Translator" public="false">
      <tag name="kernel.locale_aware"/>
      <argument type="service" id=".service_locator.V.o0zE7"/>
      <argument type="service" id="translator.formatter.default"/>
      <argument>en</argument>
      <argument type="collection">
        <argument key="translation.loader.php" type="collection">
          <argument>php</argument>
        </argument>
        <argument key="translation.loader.yml" type="collection">
          <argument>yaml</argument>
          <argument>yml</argument>
        </argument>
        <argument key="translation.loader.xliff" type="collection">
          <argument>xlf</argument>
          <argument>xliff</argument>
        </argument>
        <argument key="translation.loader.po" type="collection">
          <argument>po</argument>
        </argument>
        <argument key="translation.loader.mo" type="collection">
          <argument>mo</argument>
        </argument>
        <argument key="translation.loader.qt" type="collection">
          <argument>ts</argument>
        </argument>
        <argument key="translation.loader.csv" type="collection">
          <argument>csv</argument>
        </argument>
        <argument key="translation.loader.res" type="collection">
          <argument>res</argument>
        </argument>
        <argument key="translation.loader.dat" type="collection">
          <argument>dat</argument>
        </argument>
        <argument key="translation.loader.ini" type="collection">
          <argument>ini</argument>
        </argument>
        <argument key="translation.loader.json" type="collection">
          <argument>json</argument>
        </argument>
      </argument>
      <argument type="collection">
        <argument key="cache_dir">/var/www/html/apps/backoffice/backend/var/cache/dev/translations</argument>
        <argument key="debug">true</argument>
      </argument>
      <call method="setConfigCacheFactory">
        <argument type="service" id="config_cache_factory"/>
      </call>
      <call method="setFallbackLocales">
        <argument type="collection">
          <argument>en</argument>
        </argument>
      </call>
    </service>
    <service id="translator.logging" class="Symfony\Component\Translation\LoggingTranslator" public="false">
      <tag name="monolog.logger" channel="translation"/>
      <argument type="service" id="translator.logging.inner"/>
      <argument type="service" id="logger"/>
    </service>
    <service id="translator.formatter.default" class="Symfony\Component\Translation\Formatter\MessageFormatter" public="false">
      <argument type="service" id="identity_translator"/>
    </service>
    <service id="translation.loader.php" class="Symfony\Component\Translation\Loader\PhpFileLoader" public="false">
      <tag name="translation.loader" alias="php"/>
    </service>
    <service id="translation.loader.yml" class="Symfony\Component\Translation\Loader\YamlFileLoader" public="false">
      <tag name="translation.loader" alias="yaml" legacy_alias="yml" legacy-alias="yml"/>
    </service>
    <service id="translation.loader.xliff" class="Symfony\Component\Translation\Loader\XliffFileLoader" public="false">
      <tag name="translation.loader" alias="xlf" legacy_alias="xliff" legacy-alias="xliff"/>
    </service>
    <service id="translation.loader.po" class="Symfony\Component\Translation\Loader\PoFileLoader" public="false">
      <tag name="translation.loader" alias="po"/>
    </service>
    <service id="translation.loader.mo" class="Symfony\Component\Translation\Loader\MoFileLoader" public="false">
      <tag name="translation.loader" alias="mo"/>
    </service>
    <service id="translation.loader.qt" class="Symfony\Component\Translation\Loader\QtFileLoader" public="false">
      <tag name="translation.loader" alias="ts"/>
    </service>
    <service id="translation.loader.csv" class="Symfony\Component\Translation\Loader\CsvFileLoader" public="false">
      <tag name="translation.loader" alias="csv"/>
    </service>
    <service id="translation.loader.res" class="Symfony\Component\Translation\Loader\IcuResFileLoader" public="false">
      <tag name="translation.loader" alias="res"/>
    </service>
    <service id="translation.loader.dat" class="Symfony\Component\Translation\Loader\IcuDatFileLoader" public="false">
      <tag name="translation.loader" alias="dat"/>
    </service>
    <service id="translation.loader.ini" class="Symfony\Component\Translation\Loader\IniFileLoader" public="false">
      <tag name="translation.loader" alias="ini"/>
    </service>
    <service id="translation.loader.json" class="Symfony\Component\Translation\Loader\JsonFileLoader" public="false">
      <tag name="translation.loader" alias="json"/>
    </service>
    <service id="translation.dumper.php" class="Symfony\Component\Translation\Dumper\PhpFileDumper" public="false">
      <tag name="translation.dumper" alias="php"/>
    </service>
    <service id="translation.dumper.xliff" class="Symfony\Component\Translation\Dumper\XliffFileDumper" public="false">
      <tag name="translation.dumper" alias="xlf"/>
    </service>
    <service id="translation.dumper.po" class="Symfony\Component\Translation\Dumper\PoFileDumper" public="false">
      <tag name="translation.dumper" alias="po"/>
    </service>
    <service id="translation.dumper.mo" class="Symfony\Component\Translation\Dumper\MoFileDumper" public="false">
      <tag name="translation.dumper" alias="mo"/>
    </service>
    <service id="translation.dumper.yml" class="Symfony\Component\Translation\Dumper\YamlFileDumper" public="false">
      <tag name="translation.dumper" alias="yml"/>
    </service>
    <service id="translation.dumper.yaml" class="Symfony\Component\Translation\Dumper\YamlFileDumper" public="false">
      <tag name="translation.dumper" alias="yaml"/>
      <argument>yaml</argument>
    </service>
    <service id="translation.dumper.qt" class="Symfony\Component\Translation\Dumper\QtFileDumper" public="false">
      <tag name="translation.dumper" alias="ts"/>
    </service>
    <service id="translation.dumper.csv" class="Symfony\Component\Translation\Dumper\CsvFileDumper" public="false">
      <tag name="translation.dumper" alias="csv"/>
    </service>
    <service id="translation.dumper.ini" class="Symfony\Component\Translation\Dumper\IniFileDumper" public="false">
      <tag name="translation.dumper" alias="ini"/>
    </service>
    <service id="translation.dumper.json" class="Symfony\Component\Translation\Dumper\JsonFileDumper" public="false">
      <tag name="translation.dumper" alias="json"/>
    </service>
    <service id="translation.dumper.res" class="Symfony\Component\Translation\Dumper\IcuResFileDumper" public="false">
      <tag name="translation.dumper" alias="res"/>
    </service>
    <service id="translation.extractor.php" class="Symfony\Component\Translation\Extractor\PhpExtractor" public="false">
      <tag name="translation.extractor" alias="php"/>
    </service>
    <service id="translation.reader" class="Symfony\Component\Translation\Reader\TranslationReader" public="false">
      <call method="addLoader">
        <argument>php</argument>
        <argument type="service" id="translation.loader.php"/>
      </call>
      <call method="addLoader">
        <argument>yaml</argument>
        <argument type="service" id="translation.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument>yml</argument>
        <argument type="service" id="translation.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument>xlf</argument>
        <argument type="service" id="translation.loader.xliff"/>
      </call>
      <call method="addLoader">
        <argument>xliff</argument>
        <argument type="service" id="translation.loader.xliff"/>
      </call>
      <call method="addLoader">
        <argument>po</argument>
        <argument type="service" id="translation.loader.po"/>
      </call>
      <call method="addLoader">
        <argument>mo</argument>
        <argument type="service" id="translation.loader.mo"/>
      </call>
      <call method="addLoader">
        <argument>ts</argument>
        <argument type="service" id="translation.loader.qt"/>
      </call>
      <call method="addLoader">
        <argument>csv</argument>
        <argument type="service" id="translation.loader.csv"/>
      </call>
      <call method="addLoader">
        <argument>res</argument>
        <argument type="service" id="translation.loader.res"/>
      </call>
      <call method="addLoader">
        <argument>dat</argument>
        <argument type="service" id="translation.loader.dat"/>
      </call>
      <call method="addLoader">
        <argument>ini</argument>
        <argument type="service" id="translation.loader.ini"/>
      </call>
      <call method="addLoader">
        <argument>json</argument>
        <argument type="service" id="translation.loader.json"/>
      </call>
    </service>
    <service id="translation.extractor" class="Symfony\Component\Translation\Extractor\ChainExtractor" public="false">
      <call method="addExtractor">
        <argument>php</argument>
        <argument type="service" id="translation.extractor.php"/>
      </call>
      <call method="addExtractor">
        <argument>twig</argument>
        <argument type="service" id="twig.translation.extractor"/>
      </call>
    </service>
    <service id="translation.writer" class="Symfony\Component\Translation\Writer\TranslationWriter" public="false">
      <call method="addDumper">
        <argument>php</argument>
        <argument type="service" id="translation.dumper.php"/>
      </call>
      <call method="addDumper">
        <argument>xlf</argument>
        <argument type="service" id="translation.dumper.xliff"/>
      </call>
      <call method="addDumper">
        <argument>po</argument>
        <argument type="service" id="translation.dumper.po"/>
      </call>
      <call method="addDumper">
        <argument>mo</argument>
        <argument type="service" id="translation.dumper.mo"/>
      </call>
      <call method="addDumper">
        <argument>yml</argument>
        <argument type="service" id="translation.dumper.yml"/>
      </call>
      <call method="addDumper">
        <argument>yaml</argument>
        <argument type="service" id="translation.dumper.yaml"/>
      </call>
      <call method="addDumper">
        <argument>ts</argument>
        <argument type="service" id="translation.dumper.qt"/>
      </call>
      <call method="addDumper">
        <argument>csv</argument>
        <argument type="service" id="translation.dumper.csv"/>
      </call>
      <call method="addDumper">
        <argument>ini</argument>
        <argument type="service" id="translation.dumper.ini"/>
      </call>
      <call method="addDumper">
        <argument>json</argument>
        <argument type="service" id="translation.dumper.json"/>
      </call>
      <call method="addDumper">
        <argument>res</argument>
        <argument type="service" id="translation.dumper.res"/>
      </call>
    </service>
    <service id="translation.warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\TranslationsCacheWarmer" public="false">
      <tag name="container.service_subscriber" id="translator"/>
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id=".service_locator.XSes1R5.translation.warmer"/>
    </service>
    <service id="debug.debug_handlers_listener" class="Symfony\Component\HttpKernel\EventListener\DebugHandlersListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="php"/>
      <tag name="container.hot_path"/>
      <argument>null</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>null</argument>
      <argument>-1</argument>
      <argument>true</argument>
      <argument type="service" id="debug.file_link_formatter"/>
      <argument>true</argument>
    </service>
    <service id="debug.file_link_formatter" class="Symfony\Component\HttpKernel\Debug\FileLinkFormatter" public="false">
      <argument>null</argument>
    </service>
    <service id=".1_LegacyRouteLoaderContainer~IABMm9X" class="Symfony\Bundle\FrameworkBundle\Routing\LegacyRouteLoaderContainer" public="false">
      <argument type="service" id="service_container"/>
      <argument type="service" id=".service_locator.4hOlKMd"/>
    </service>
    <service id="routing.resolver" class="Symfony\Component\Config\Loader\LoaderResolver" public="false">
      <call method="addLoader">
        <argument type="service" id="routing.loader.xml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.php"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.glob"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.container"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation.file"/>
      </call>
    </service>
    <service id="routing.loader.xml" class="Symfony\Component\Routing\Loader\XmlFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.yml" class="Symfony\Component\Routing\Loader\YamlFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.php" class="Symfony\Component\Routing\Loader\PhpFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.glob" class="Symfony\Component\Routing\Loader\GlobFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.directory" class="Symfony\Component\Routing\Loader\DirectoryLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.service" class="Symfony\Component\Routing\Loader\DependencyInjection\ServiceRouterLoader" public="false">
      <argument type="service" id="service_container"/>
      <deprecated>The "%service_id%" service is deprecated since Symfony 4.4, use "routing.loader.container" instead.</deprecated>
    </service>
    <service id="routing.loader.container" class="Symfony\Component\Routing\Loader\ContainerLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id=".1_LegacyRouteLoaderContainer~IABMm9X"/>
    </service>
    <service id="routing.loader" class="Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader" public="true">
      <argument type="service" id="routing.resolver"/>
      <argument type="collection"/>
      <argument type="collection">
        <argument key="utf8">true</argument>
      </argument>
    </service>
    <service id="router.default" class="Symfony\Bundle\FrameworkBundle\Routing\Router" public="false">
      <tag name="monolog.logger" channel="router"/>
      <tag name="container.service_subscriber" id="routing.loader"/>
      <argument type="service" id=".service_locator.YrZrpzt.router.default"/>
      <argument>kernel::loadRoutes</argument>
      <argument type="collection">
        <argument key="cache_dir">/var/www/html/apps/backoffice/backend/var/cache/dev</argument>
        <argument key="debug">true</argument>
        <argument key="generator_class">Symfony\Component\Routing\Generator\CompiledUrlGenerator</argument>
        <argument key="generator_dumper_class">Symfony\Component\Routing\Generator\Dumper\CompiledUrlGeneratorDumper</argument>
        <argument key="matcher_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableCompiledUrlMatcher</argument>
        <argument key="matcher_dumper_class">Symfony\Component\Routing\Matcher\Dumper\CompiledUrlMatcherDumper</argument>
        <argument key="strict_requirements">true</argument>
        <argument key="resource_type">service</argument>
      </argument>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="parameter_bag" on-invalid="ignore"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument>en</argument>
      <call method="setConfigCacheFactory">
        <argument type="service" id="config_cache_factory"/>
      </call>
    </service>
    <service id="router.request_context" class="Symfony\Component\Routing\RequestContext" public="false">
      <argument></argument>
      <argument>GET</argument>
      <argument>localhost</argument>
      <argument>http</argument>
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="router.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer" public="false">
      <tag name="container.service_subscriber" id="router"/>
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id=".service_locator.m90YCjy.router.cache_warmer"/>
    </service>
    <service id="router_listener" class="Symfony\Component\HttpKernel\EventListener\RouterListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument>/var/www/html/apps/backoffice/backend</argument>
      <argument>true</argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" class="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" public="true">
      <argument type="service" id="router.default"/>
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" class="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" public="true">
      <argument type="service" id="twig" on-invalid="ignore"/>
      <argument>null</argument>
    </service>
    <service id="routing.loader.annotation" class="Symfony\Bundle\FrameworkBundle\Routing\AnnotatedRouteControllerLoader" public="false">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="annotations.cached_reader"/>
    </service>
    <service id="routing.loader.annotation.directory" class="Symfony\Component\Routing\Loader\AnnotationDirectoryLoader" public="false">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.annotation"/>
    </service>
    <service id="routing.loader.annotation.file" class="Symfony\Component\Routing\Loader\AnnotationFileLoader" public="false">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.annotation"/>
    </service>
    <service id=".2_ArrayAdapter~XoAJ6ol" class="Symfony\Component\Cache\Adapter\ArrayAdapter" public="false"/>
    <service id=".1_DoctrineProvider~XoAJ6ol" class="Symfony\Component\Cache\DoctrineProvider" public="false">
      <argument type="service" id=".2_ArrayAdapter~XoAJ6ol"/>
    </service>
    <service id="annotations.reader" class="Doctrine\Common\Annotations\AnnotationReader" public="false">
      <call method="addGlobalIgnoredName">
        <argument>required</argument>
        <argument type="service" id="annotations.dummy_registry"/>
      </call>
    </service>
    <service id="annotations.dummy_registry" class="Doctrine\Common\Annotations\AnnotationRegistry" public="false">
      <call method="registerUniqueLoader">
        <argument>class_exists</argument>
      </call>
    </service>
    <service id="annotations.cached_reader" class="Doctrine\Common\Annotations\PsrCachedReader" public="false">
      <tag name="annotations.cached_reader"/>
      <tag name="container.do_not_inline"/>
      <argument type="service" id="annotations.reader"/>
      <argument type="service">
        <service class="Symfony\Component\Cache\Adapter\ArrayAdapter"/>
      </argument>
      <argument>true</argument>
      <argument type="service_closure" id="annotations.cache_adapter"/>
    </service>
    <service id="annotations.filesystem_cache_adapter" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="false">
      <argument></argument>
      <argument>0</argument>
      <argument></argument>
    </service>
    <service id="annotations.filesystem_cache" class="Symfony\Component\Cache\DoctrineProvider" public="false">
      <argument type="service" id="annotations.filesystem_cache_adapter"/>
    </service>
    <service id="annotations.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\AnnotationsCacheWarmer" public="false">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="annotations.reader"/>
      <argument>/var/www/html/apps/backoffice/backend/var/cache/dev/annotations.php</argument>
      <argument>#^Symfony\\(?:Component\\HttpKernel\\|Bundle\\FrameworkBundle\\Controller\\(?!.*Controller$))#</argument>
      <argument>true</argument>
    </service>
    <service id="annotations.cache_adapter" class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" public="false">
      <tag name="container.hot_path"/>
      <argument>/var/www/html/apps/backoffice/backend/var/cache/dev/annotations.php</argument>
      <argument type="service" id="cache.annotations"/>
      <factory class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" method="create"/>
    </service>
    <service id="annotations.cache" class="Symfony\Component\Cache\DoctrineProvider" public="false">
      <tag name="container.hot_path"/>
      <argument type="service" id="annotations.cache_adapter"/>
    </service>
    <service id="secrets.vault" class="Symfony\Bundle\FrameworkBundle\Secrets\SodiumVault">
      <tag name="container.env_var_loader"/>
      <argument>/var/www/html/apps/backoffice/backend/config/secrets/dev</argument>
      <argument>%env(base64:default::SYMFONY_DECRYPTION_SECRET)%</argument>
    </service>
    <service id="secrets.local_vault" class="Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault">
      <argument>/var/www/html/apps/backoffice/backend/.env.dev.local</argument>
    </service>
    <service id=".2_~5PHH984" public="false">
      <argument type="service" id="request_stack"/>
      <argument>true</argument>
      <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer" method="isDebug"/>
    </service>
    <service id=".1_~5PHH984" public="false">
      <argument type="service" id="request_stack"/>
      <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\SerializerErrorRenderer" method="getPreferredFormat"/>
    </service>
    <service id="serializer" class="Symfony\Component\Serializer\Serializer" public="true">
      <argument type="collection">
        <argument type="service" id="serializer.normalizer.problem"/>
        <argument type="service" id="serializer.normalizer.json_serializable"/>
        <argument type="service" id="serializer.normalizer.datetime"/>
        <argument type="service" id="serializer.normalizer.constraint_violation_list"/>
        <argument type="service" id="serializer.normalizer.datetimezone"/>
        <argument type="service" id="serializer.normalizer.dateinterval"/>
        <argument type="service" id="serializer.normalizer.data_uri"/>
        <argument type="service" id="serializer.denormalizer.array"/>
      </argument>
      <argument type="collection">
        <argument type="service" id="serializer.encoder.xml"/>
        <argument type="service" id="serializer.encoder.json"/>
        <argument type="service" id="serializer.encoder.yaml"/>
        <argument type="service" id="serializer.encoder.csv"/>
      </argument>
    </service>
    <service id="serializer.mapping.class_discriminator_resolver" class="Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata" public="false">
      <argument type="service" id="serializer.mapping.class_metadata_factory"/>
    </service>
    <service id="serializer.normalizer.constraint_violation_list" class="Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-915"/>
      <argument type="collection"/>
      <argument type="service" id="serializer.name_converter.metadata_aware"/>
    </service>
    <service id="serializer.normalizer.datetimezone" class="Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-915"/>
    </service>
    <service id="serializer.normalizer.dateinterval" class="Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-915"/>
    </service>
    <service id="serializer.normalizer.data_uri" class="Symfony\Component\Serializer\Normalizer\DataUriNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-920"/>
      <argument type="service" id="mime_types" on-invalid="null"/>
    </service>
    <service id="serializer.normalizer.datetime" class="Symfony\Component\Serializer\Normalizer\DateTimeNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-910"/>
    </service>
    <service id="serializer.normalizer.json_serializable" class="Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-900"/>
    </service>
    <service id="serializer.normalizer.problem" class="Symfony\Component\Serializer\Normalizer\ProblemNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-890"/>
      <argument>true</argument>
    </service>
    <service id="serializer.denormalizer.array" class="Symfony\Component\Serializer\Normalizer\ArrayDenormalizer" public="false">
      <tag name="serializer.normalizer" priority="-990"/>
    </service>
    <service id="serializer.mapping.chain_loader" class="Symfony\Component\Serializer\Mapping\Loader\LoaderChain" public="false">
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader" public="false">
            <argument type="service" id="annotations.cached_reader"/>
          </service>
        </argument>
      </argument>
    </service>
    <service id="serializer.mapping.class_metadata_factory" class="Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory" public="false">
      <argument type="service" id="serializer.mapping.chain_loader"/>
    </service>
    <service id="serializer.mapping.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\SerializerCacheWarmer" public="false">
      <tag name="kernel.cache_warmer"/>
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader" public="false">
            <argument type="service" id="annotations.cached_reader"/>
          </service>
        </argument>
      </argument>
      <argument>/var/www/html/apps/backoffice/backend/var/cache/dev/serialization.php</argument>
    </service>
    <service id="serializer.mapping.cache.symfony" class="Psr\Cache\CacheItemPoolInterface" public="false">
      <argument>/var/www/html/apps/backoffice/backend/var/cache/dev/serialization.php</argument>
      <argument type="service" id="cache.serializer"/>
      <factory class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" method="create"/>
    </service>
    <service id="serializer.encoder.xml" class="Symfony\Component\Serializer\Encoder\XmlEncoder" public="false">
      <tag name="serializer.encoder"/>
    </service>
    <service id="serializer.encoder.json" class="Symfony\Component\Serializer\Encoder\JsonEncoder" public="false">
      <tag name="serializer.encoder"/>
    </service>
    <service id="serializer.encoder.yaml" class="Symfony\Component\Serializer\Encoder\YamlEncoder" public="false">
      <tag name="serializer.encoder"/>
    </service>
    <service id="serializer.encoder.csv" class="Symfony\Component\Serializer\Encoder\CsvEncoder" public="false">
      <tag name="serializer.encoder"/>
    </service>
    <service id="serializer.name_converter.camel_case_to_snake_case" class="Symfony\Component\Serializer\NameConverter\CamelCaseToSnakeCaseNameConverter" public="false"/>
    <service id="serializer.name_converter.metadata_aware" class="Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter" public="false">
      <argument type="service" id="serializer.mapping.class_metadata_factory"/>
    </service>
    <service id="property_info.serializer_extractor" class="Symfony\Component\PropertyInfo\Extractor\SerializerExtractor" public="false">
      <tag name="property_info.list_extractor" priority="-999"/>
      <argument type="service" id="serializer.mapping.class_metadata_factory"/>
    </service>
    <service id="error_handler.error_renderer.serializer" class="Symfony\Component\ErrorHandler\ErrorRenderer\SerializerErrorRenderer" public="false">
      <argument type="service" id="serializer"/>
      <argument type="service" id=".1_~5PHH984"/>
      <argument type="service" id="twig.error_renderer.html"/>
      <argument type="service" id=".2_~5PHH984"/>
    </service>
    <service id="mime_types" class="Symfony\Component\Mime\MimeTypes" public="false">
      <call method="setDefault">
        <argument type="service" id="mime_types"/>
      </call>
    </service>
    <service id="behat.mink" class="Behat\Mink\Mink" public="true" lazy="true">
      <argument>fob_symfony.mink</argument>
      <factory service="behat.service_container" method="get"/>
    </service>
    <service id="behat.mink.default_session" class="Behat\Mink\Session" public="true" lazy="true">
      <factory service="behat.mink" method="getSession"/>
    </service>
    <service id="behat.mink.parameters" class="FriendsOfBehat\SymfonyExtension\Mink\MinkParameters" public="true" lazy="true">
      <argument>fob_symfony.mink.parameters</argument>
      <factory service="behat.service_container" method="get"/>
    </service>
    <service id="behat.service_container" class="Symfony\Component\DependencyInjection\ContainerInterface" public="true" synthetic="true"/>
    <service id="behat.driver.service_container" class="Symfony\Component\DependencyInjection\ContainerInterface" public="true" lazy="true">
      <argument>test.service_container</argument>
      <factory method="get">
        <service class="Symfony\Component\DependencyInjection\ContainerInterface" public="true" lazy="true">
          <factory method="getContainer">
            <service class="Symfony\Component\HttpKernel\KernelInterface" public="true" lazy="true">
              <argument>fob_symfony.driver_kernel</argument>
              <factory service="behat.service_container" method="get"/>
            </service>
          </factory>
        </service>
      </factory>
    </service>
    <service id=".4_Swift_Transport_Esmtp_Auth_NTLMAuthenticator~OfqmADc" class="Swift_Transport_Esmtp_Auth_NTLMAuthenticator" public="false"/>
    <service id=".3_Swift_Transport_Esmtp_Auth_PlainAuthenticator~OfqmADc" class="Swift_Transport_Esmtp_Auth_PlainAuthenticator" public="false"/>
    <service id=".2_Swift_Transport_Esmtp_Auth_LoginAuthenticator~OfqmADc" class="Swift_Transport_Esmtp_Auth_LoginAuthenticator" public="false"/>
    <service id=".1_Swift_Transport_Esmtp_Auth_CramMd5Authenticator~OfqmADc" class="Swift_Transport_Esmtp_Auth_CramMd5Authenticator" public="false"/>
    <service id="swiftmailer.mailer.abstract" class="Swift_Mailer" public="true" abstract="true">
      <argument type="service" id="swiftmailer.mailer.default.transport.spool"/>
    </service>
    <service id="swiftmailer.transport.smtp.configurator.abstract" class="Symfony\Bundle\SwiftmailerBundle\DependencyInjection\SmtpTransportConfigurator" public="false" abstract="true"/>
    <service id="swiftmailer.transport.sendmail.abstract" class="Swift_Transport_SendmailTransport" public="false" abstract="true"/>
    <service id="swiftmailer.transport.null.abstract" class="Swift_Transport_NullTransport" public="false" abstract="true"/>
    <service id="swiftmailer.transport.failover" class="Swift_Transport_FailoverTransport" public="false"/>
    <service id="swiftmailer.transport.buffer.abstract" class="Swift_Transport_StreamBuffer" public="false" abstract="true">
      <argument type="service" id="swiftmailer.transport.replacementfactory"/>
    </service>
    <service id="swiftmailer.transport.authhandler.abstract" class="Swift_Transport_Esmtp_AuthHandler" public="false" abstract="true">
      <argument type="collection">
        <argument type="service" id=".1_Swift_Transport_Esmtp_Auth_CramMd5Authenticator~OfqmADc"/>
        <argument type="service" id=".2_Swift_Transport_Esmtp_Auth_LoginAuthenticator~OfqmADc"/>
        <argument type="service" id=".3_Swift_Transport_Esmtp_Auth_PlainAuthenticator~OfqmADc"/>
        <argument type="service" id=".4_Swift_Transport_Esmtp_Auth_NTLMAuthenticator~OfqmADc"/>
      </argument>
    </service>
    <service id="swiftmailer.transport.eventdispatcher.abstract" class="Swift_Events_SimpleEventDispatcher" public="false" abstract="true"/>
    <service id="swiftmailer.transport.replacementfactory" class="Swift_StreamFilters_StringReplacementFilterFactory" public="false"/>
    <service id="swiftmailer.plugin.redirecting.abstract" class="Swift_Plugins_RedirectingPlugin" public="false" abstract="true"/>
    <service id="swiftmailer.plugin.antiflood.abstract" class="Swift_Plugins_AntiFloodPlugin" public="false" abstract="true"/>
    <service id="swiftmailer.plugin.impersonate.abstract" class="Swift_Plugins_ImpersonatePlugin" public="false" abstract="true"/>
    <service id="swiftmailer.plugin.messagelogger.abstract" class="Swift_Plugins_MessageLogger" abstract="true"/>
    <service id="swiftmailer.transport.smtp.abstract" class="Swift_Transport_EsmtpTransport" public="false" abstract="true"/>
    <service id="swiftmailer.transport.spool.abstract" class="Swift_Transport_SpoolTransport" public="false" abstract="true"/>
    <service id="swiftmailer.spool.file.abstract" class="Swift_FileSpool" public="false" abstract="true">
      <argument></argument>
    </service>
    <service id="swiftmailer.spool.memory.abstract" class="Swift_MemorySpool" public="false" abstract="true"/>
    <service id="swiftmailer.email_sender.listener" class="Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="swiftmailer.data_collector" class="Symfony\Bundle\SwiftmailerBundle\DataCollector\MessageDataCollector" public="false">
      <tag name="data_collector" template="@Swiftmailer/Collector/swiftmailer.html.twig" id="swiftmailer" priority="245"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="swiftmailer.command.debug" class="Symfony\Bundle\SwiftmailerBundle\Command\DebugCommand">
      <tag name="console.command" command="debug:swiftmailer"/>
      <call method="setName">
        <argument>debug:swiftmailer</argument>
      </call>
    </service>
    <service id="swiftmailer.command.new_email" class="Symfony\Bundle\SwiftmailerBundle\Command\NewEmailCommand">
      <tag name="console.command" command="swiftmailer:email:send"/>
      <call method="setName">
        <argument>swiftmailer:email:send</argument>
      </call>
    </service>
    <service id="swiftmailer.command.send_email" class="Symfony\Bundle\SwiftmailerBundle\Command\SendEmailCommand">
      <tag name="console.command" command="swiftmailer:spool:send"/>
      <call method="setName">
        <argument>swiftmailer:spool:send</argument>
      </call>
    </service>
    <service id="swiftmailer.mailer.default.transport.eventdispatcher" class="Swift_Events_SimpleEventDispatcher" public="false"/>
    <service id="swiftmailer.mailer.default.transport.dynamic" class="Swift_Transport">
      <argument type="collection">
        <argument key="transport">smtp</argument>
        <argument key="url">%env(MAILER_URL)%</argument>
        <argument key="username">null</argument>
        <argument key="password">null</argument>
        <argument key="host">localhost</argument>
        <argument key="port">null</argument>
        <argument key="timeout">30</argument>
        <argument key="source_ip">null</argument>
        <argument key="local_domain">null</argument>
        <argument key="encryption">null</argument>
        <argument key="auth_mode">null</argument>
        <argument key="command">/usr/sbin/sendmail -t -i</argument>
        <argument key="stream_options" type="collection"/>
      </argument>
      <argument type="service" id="router.request_context" on-invalid="null"/>
      <argument type="service" id="swiftmailer.mailer.default.transport.eventdispatcher"/>
      <factory class="Symfony\Bundle\SwiftmailerBundle\DependencyInjection\SwiftmailerTransportFactory" method="createTransport"/>
    </service>
    <service id="swiftmailer.mailer.default" class="Swift_Mailer" public="true">
      <argument type="service" id="swiftmailer.mailer.default.transport.spool"/>
    </service>
    <service id="swiftmailer.mailer.default.spool.memory" class="Swift_MemorySpool" public="false"/>
    <service id="swiftmailer.mailer.default.transport.spool" class="Swift_Transport_SpoolTransport" public="false">
      <argument type="service" id="swiftmailer.mailer.default.transport.eventdispatcher"/>
      <argument type="service" id="swiftmailer.mailer.default.spool.memory"/>
      <call method="registerPlugin">
        <argument type="service" id="swiftmailer.mailer.default.plugin.messagelogger"/>
      </call>
    </service>
    <service id="swiftmailer.mailer.default.plugin.messagelogger" class="Swift_Plugins_MessageLogger" public="true">
      <tag name="swiftmailer.default.plugin"/>
    </service>
    <service id="aws_sdk" class="Aws\Sdk">
      <argument type="collection">
        <argument key="version">latest</argument>
        <argument key="region">eu-west-2</argument>
        <argument key="credentials" type="collection">
          <argument key="key">%env(AWS_KEY)%</argument>
          <argument key="secret">%env(AWS_SECRET)%</argument>
        </argument>
        <argument key="ua_append" type="collection">
          <argument>Symfony/4.4.42</argument>
          <argument>SYMOD/2.5.0</argument>
        </argument>
      </argument>
    </service>
    <service id="aws.accessanalyzer" class="Aws\AccessAnalyzer\AccessAnalyzerClient" lazy="true">
      <argument>AccessAnalyzer</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.account" class="Aws\Account\AccountClient" lazy="true">
      <argument>Account</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.acmpca" class="Aws\ACMPCA\ACMPCAClient" lazy="true">
      <argument>ACMPCA</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.acm" class="Aws\Acm\AcmClient" lazy="true">
      <argument>Acm</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.alexaforbusiness" class="Aws\AlexaForBusiness\AlexaForBusinessClient" lazy="true">
      <argument>AlexaForBusiness</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.prometheusservice" class="Aws\PrometheusService\PrometheusServiceClient" lazy="true">
      <argument>PrometheusService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.amplify" class="Aws\Amplify\AmplifyClient" lazy="true">
      <argument>Amplify</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.amplifybackend" class="Aws\AmplifyBackend\AmplifyBackendClient" lazy="true">
      <argument>AmplifyBackend</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.amplifyuibuilder" class="Aws\AmplifyUIBuilder\AmplifyUIBuilderClient" lazy="true">
      <argument>AmplifyUIBuilder</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.apigateway" class="Aws\ApiGateway\ApiGatewayClient" lazy="true">
      <argument>ApiGateway</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.apigatewaymanagementapi" class="Aws\ApiGatewayManagementApi\ApiGatewayManagementApiClient" lazy="true">
      <argument>ApiGatewayManagementApi</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.apigatewayv2" class="Aws\ApiGatewayV2\ApiGatewayV2Client" lazy="true">
      <argument>ApiGatewayV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.appconfig" class="Aws\AppConfig\AppConfigClient" lazy="true">
      <argument>AppConfig</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.appconfigdata" class="Aws\AppConfigData\AppConfigDataClient" lazy="true">
      <argument>AppConfigData</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.appflow" class="Aws\Appflow\AppflowClient" lazy="true">
      <argument>Appflow</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.appintegrationsservice" class="Aws\AppIntegrationsService\AppIntegrationsServiceClient" lazy="true">
      <argument>AppIntegrationsService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.applicationautoscaling" class="Aws\ApplicationAutoScaling\ApplicationAutoScalingClient" lazy="true">
      <argument>ApplicationAutoScaling</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.applicationinsights" class="Aws\ApplicationInsights\ApplicationInsightsClient" lazy="true">
      <argument>ApplicationInsights</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.applicationcostprofiler" class="Aws\ApplicationCostProfiler\ApplicationCostProfilerClient" lazy="true">
      <argument>ApplicationCostProfiler</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.appmesh" class="Aws\AppMesh\AppMeshClient" lazy="true">
      <argument>AppMesh</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.apprunner" class="Aws\AppRunner\AppRunnerClient" lazy="true">
      <argument>AppRunner</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.appstream" class="Aws\Appstream\AppstreamClient" lazy="true">
      <argument>Appstream</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.appsync" class="Aws\AppSync\AppSyncClient" lazy="true">
      <argument>AppSync</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.athena" class="Aws\Athena\AthenaClient" lazy="true">
      <argument>Athena</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.auditmanager" class="Aws\AuditManager\AuditManagerClient" lazy="true">
      <argument>AuditManager</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.autoscalingplans" class="Aws\AutoScalingPlans\AutoScalingPlansClient" lazy="true">
      <argument>AutoScalingPlans</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.autoscaling" class="Aws\AutoScaling\AutoScalingClient" lazy="true">
      <argument>AutoScaling</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.backupgateway" class="Aws\BackupGateway\BackupGatewayClient" lazy="true">
      <argument>BackupGateway</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.backup" class="Aws\Backup\BackupClient" lazy="true">
      <argument>Backup</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.batch" class="Aws\Batch\BatchClient" lazy="true">
      <argument>Batch</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.billingconductor" class="Aws\BillingConductor\BillingConductorClient" lazy="true">
      <argument>BillingConductor</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.braket" class="Aws\Braket\BraketClient" lazy="true">
      <argument>Braket</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.budgets" class="Aws\Budgets\BudgetsClient" lazy="true">
      <argument>Budgets</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.costexplorer" class="Aws\CostExplorer\CostExplorerClient" lazy="true">
      <argument>CostExplorer</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.chimesdkidentity" class="Aws\ChimeSDKIdentity\ChimeSDKIdentityClient" lazy="true">
      <argument>ChimeSDKIdentity</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.chimesdkmediapipelines" class="Aws\ChimeSDKMediaPipelines\ChimeSDKMediaPipelinesClient" lazy="true">
      <argument>ChimeSDKMediaPipelines</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.chimesdkmeetings" class="Aws\ChimeSDKMeetings\ChimeSDKMeetingsClient" lazy="true">
      <argument>ChimeSDKMeetings</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.chimesdkmessaging" class="Aws\ChimeSDKMessaging\ChimeSDKMessagingClient" lazy="true">
      <argument>ChimeSDKMessaging</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.chime" class="Aws\Chime\ChimeClient" lazy="true">
      <argument>Chime</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloud9" class="Aws\Cloud9\Cloud9Client" lazy="true">
      <argument>Cloud9</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudcontrolapi" class="Aws\CloudControlApi\CloudControlApiClient" lazy="true">
      <argument>CloudControlApi</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.clouddirectory" class="Aws\CloudDirectory\CloudDirectoryClient" lazy="true">
      <argument>CloudDirectory</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudformation" class="Aws\CloudFormation\CloudFormationClient" lazy="true">
      <argument>CloudFormation</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudfront" class="Aws\CloudFront\CloudFrontClient" lazy="true">
      <argument>CloudFront</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudhsm" class="Aws\CloudHsm\CloudHsmClient" lazy="true">
      <argument>CloudHsm</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudhsmv2" class="Aws\CloudHSMV2\CloudHSMV2Client" lazy="true">
      <argument>CloudHSMV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudsearch" class="Aws\CloudSearch\CloudSearchClient" lazy="true">
      <argument>CloudSearch</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudsearchdomain" class="Aws\CloudSearchDomain\CloudSearchDomainClient" lazy="true">
      <argument>CloudSearchDomain</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudtrail" class="Aws\CloudTrail\CloudTrailClient" lazy="true">
      <argument>CloudTrail</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codeartifact" class="Aws\CodeArtifact\CodeArtifactClient" lazy="true">
      <argument>CodeArtifact</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codebuild" class="Aws\CodeBuild\CodeBuildClient" lazy="true">
      <argument>CodeBuild</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codecommit" class="Aws\CodeCommit\CodeCommitClient" lazy="true">
      <argument>CodeCommit</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codedeploy" class="Aws\CodeDeploy\CodeDeployClient" lazy="true">
      <argument>CodeDeploy</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codegurureviewer" class="Aws\CodeGuruReviewer\CodeGuruReviewerClient" lazy="true">
      <argument>CodeGuruReviewer</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codeguruprofiler" class="Aws\CodeGuruProfiler\CodeGuruProfilerClient" lazy="true">
      <argument>CodeGuruProfiler</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codepipeline" class="Aws\CodePipeline\CodePipelineClient" lazy="true">
      <argument>CodePipeline</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codestarconnections" class="Aws\CodeStarconnections\CodeStarconnectionsClient" lazy="true">
      <argument>CodeStarconnections</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codestarnotifications" class="Aws\CodeStarNotifications\CodeStarNotificationsClient" lazy="true">
      <argument>CodeStarNotifications</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codestar" class="Aws\CodeStar\CodeStarClient" lazy="true">
      <argument>CodeStar</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cognitoidentity" class="Aws\CognitoIdentity\CognitoIdentityClient" lazy="true">
      <argument>CognitoIdentity</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cognitoidentityprovider" class="Aws\CognitoIdentityProvider\CognitoIdentityProviderClient" lazy="true">
      <argument>CognitoIdentityProvider</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cognitosync" class="Aws\CognitoSync\CognitoSyncClient" lazy="true">
      <argument>CognitoSync</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.comprehend" class="Aws\Comprehend\ComprehendClient" lazy="true">
      <argument>Comprehend</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.comprehendmedical" class="Aws\ComprehendMedical\ComprehendMedicalClient" lazy="true">
      <argument>ComprehendMedical</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.computeoptimizer" class="Aws\ComputeOptimizer\ComputeOptimizerClient" lazy="true">
      <argument>ComputeOptimizer</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.configservice" class="Aws\ConfigService\ConfigServiceClient" lazy="true">
      <argument>ConfigService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.connectcontactlens" class="Aws\ConnectContactLens\ConnectContactLensClient" lazy="true">
      <argument>ConnectContactLens</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.connect" class="Aws\Connect\ConnectClient" lazy="true">
      <argument>Connect</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.connectcampaignservice" class="Aws\ConnectCampaignService\ConnectCampaignServiceClient" lazy="true">
      <argument>ConnectCampaignService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.connectparticipant" class="Aws\ConnectParticipant\ConnectParticipantClient" lazy="true">
      <argument>ConnectParticipant</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.costandusagereportservice" class="Aws\CostandUsageReportService\CostandUsageReportServiceClient" lazy="true">
      <argument>CostandUsageReportService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.customerprofiles" class="Aws\CustomerProfiles\CustomerProfilesClient" lazy="true">
      <argument>CustomerProfiles</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotdataplane" class="Aws\IotDataPlane\IotDataPlaneClient" lazy="true">
      <argument>IotDataPlane</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.gluedatabrew" class="Aws\GlueDataBrew\GlueDataBrewClient" lazy="true">
      <argument>GlueDataBrew</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.dataexchange" class="Aws\DataExchange\DataExchangeClient" lazy="true">
      <argument>DataExchange</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.datapipeline" class="Aws\DataPipeline\DataPipelineClient" lazy="true">
      <argument>DataPipeline</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.datasync" class="Aws\DataSync\DataSyncClient" lazy="true">
      <argument>DataSync</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.dax" class="Aws\DAX\DAXClient" lazy="true">
      <argument>DAX</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.detective" class="Aws\Detective\DetectiveClient" lazy="true">
      <argument>Detective</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.devicefarm" class="Aws\DeviceFarm\DeviceFarmClient" lazy="true">
      <argument>DeviceFarm</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.devopsguru" class="Aws\DevOpsGuru\DevOpsGuruClient" lazy="true">
      <argument>DevOpsGuru</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.directconnect" class="Aws\DirectConnect\DirectConnectClient" lazy="true">
      <argument>DirectConnect</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.applicationdiscoveryservice" class="Aws\ApplicationDiscoveryService\ApplicationDiscoveryServiceClient" lazy="true">
      <argument>ApplicationDiscoveryService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.dlm" class="Aws\DLM\DLMClient" lazy="true">
      <argument>DLM</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.databasemigrationservice" class="Aws\DatabaseMigrationService\DatabaseMigrationServiceClient" lazy="true">
      <argument>DatabaseMigrationService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.docdb" class="Aws\DocDB\DocDBClient" lazy="true">
      <argument>DocDB</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.drs" class="Aws\drs\drsClient" lazy="true">
      <argument>drs</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.directoryservice" class="Aws\DirectoryService\DirectoryServiceClient" lazy="true">
      <argument>DirectoryService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.dynamodb" class="Aws\DynamoDb\DynamoDbClient" lazy="true">
      <argument>DynamoDb</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ebs" class="Aws\EBS\EBSClient" lazy="true">
      <argument>EBS</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ec2instanceconnect" class="Aws\EC2InstanceConnect\EC2InstanceConnectClient" lazy="true">
      <argument>EC2InstanceConnect</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ec2" class="Aws\Ec2\Ec2Client" lazy="true">
      <argument>Ec2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ecrpublic" class="Aws\ECRPublic\ECRPublicClient" lazy="true">
      <argument>ECRPublic</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ecr" class="Aws\Ecr\EcrClient" lazy="true">
      <argument>Ecr</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ecs" class="Aws\Ecs\EcsClient" lazy="true">
      <argument>Ecs</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.eks" class="Aws\EKS\EKSClient" lazy="true">
      <argument>EKS</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.elasticinference" class="Aws\ElasticInference\ElasticInferenceClient" lazy="true">
      <argument>ElasticInference</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.elasticache" class="Aws\ElastiCache\ElastiCacheClient" lazy="true">
      <argument>ElastiCache</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.elasticbeanstalk" class="Aws\ElasticBeanstalk\ElasticBeanstalkClient" lazy="true">
      <argument>ElasticBeanstalk</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.efs" class="Aws\Efs\EfsClient" lazy="true">
      <argument>Efs</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.elasticloadbalancing" class="Aws\ElasticLoadBalancing\ElasticLoadBalancingClient" lazy="true">
      <argument>ElasticLoadBalancing</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.elasticloadbalancingv2" class="Aws\ElasticLoadBalancingV2\ElasticLoadBalancingV2Client" lazy="true">
      <argument>ElasticLoadBalancingV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.emr" class="Aws\Emr\EmrClient" lazy="true">
      <argument>Emr</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.elastictranscoder" class="Aws\ElasticTranscoder\ElasticTranscoderClient" lazy="true">
      <argument>ElasticTranscoder</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ses" class="Aws\Ses\SesClient" lazy="true">
      <argument>Ses</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.emrcontainers" class="Aws\EMRContainers\EMRContainersClient" lazy="true">
      <argument>EMRContainers</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.emrserverless" class="Aws\EMRServerless\EMRServerlessClient" lazy="true">
      <argument>EMRServerless</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.marketplaceentitlementservice" class="Aws\MarketplaceEntitlementService\MarketplaceEntitlementServiceClient" lazy="true">
      <argument>MarketplaceEntitlementService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.elasticsearchservice" class="Aws\ElasticsearchService\ElasticsearchServiceClient" lazy="true">
      <argument>ElasticsearchService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.eventbridge" class="Aws\EventBridge\EventBridgeClient" lazy="true">
      <argument>EventBridge</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudwatchevents" class="Aws\CloudWatchEvents\CloudWatchEventsClient" lazy="true">
      <argument>CloudWatchEvents</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudwatchevidently" class="Aws\CloudWatchEvidently\CloudWatchEvidentlyClient" lazy="true">
      <argument>CloudWatchEvidently</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.finspacedata" class="Aws\FinSpaceData\FinSpaceDataClient" lazy="true">
      <argument>FinSpaceData</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.finspace" class="Aws\finspace\finspaceClient" lazy="true">
      <argument>finspace</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.firehose" class="Aws\Firehose\FirehoseClient" lazy="true">
      <argument>Firehose</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.fis" class="Aws\FIS\FISClient" lazy="true">
      <argument>FIS</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.fms" class="Aws\FMS\FMSClient" lazy="true">
      <argument>FMS</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.forecastservice" class="Aws\ForecastService\ForecastServiceClient" lazy="true">
      <argument>ForecastService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.forecastqueryservice" class="Aws\ForecastQueryService\ForecastQueryServiceClient" lazy="true">
      <argument>ForecastQueryService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.frauddetector" class="Aws\FraudDetector\FraudDetectorClient" lazy="true">
      <argument>FraudDetector</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.fsx" class="Aws\FSx\FSxClient" lazy="true">
      <argument>FSx</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.gamelift" class="Aws\GameLift\GameLiftClient" lazy="true">
      <argument>GameLift</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.gamesparks" class="Aws\GameSparks\GameSparksClient" lazy="true">
      <argument>GameSparks</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.glacier" class="Aws\Glacier\GlacierClient" lazy="true">
      <argument>Glacier</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.globalaccelerator" class="Aws\GlobalAccelerator\GlobalAcceleratorClient" lazy="true">
      <argument>GlobalAccelerator</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.glue" class="Aws\Glue\GlueClient" lazy="true">
      <argument>Glue</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.managedgrafana" class="Aws\ManagedGrafana\ManagedGrafanaClient" lazy="true">
      <argument>ManagedGrafana</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.greengrass" class="Aws\Greengrass\GreengrassClient" lazy="true">
      <argument>Greengrass</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.greengrassv2" class="Aws\GreengrassV2\GreengrassV2Client" lazy="true">
      <argument>GreengrassV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.groundstation" class="Aws\GroundStation\GroundStationClient" lazy="true">
      <argument>GroundStation</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.guardduty" class="Aws\GuardDuty\GuardDutyClient" lazy="true">
      <argument>GuardDuty</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.health" class="Aws\Health\HealthClient" lazy="true">
      <argument>Health</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.healthlake" class="Aws\HealthLake\HealthLakeClient" lazy="true">
      <argument>HealthLake</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.honeycode" class="Aws\Honeycode\HoneycodeClient" lazy="true">
      <argument>Honeycode</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iam" class="Aws\Iam\IamClient" lazy="true">
      <argument>Iam</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.identitystore" class="Aws\IdentityStore\IdentityStoreClient" lazy="true">
      <argument>IdentityStore</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.imagebuilder" class="Aws\imagebuilder\imagebuilderClient" lazy="true">
      <argument>imagebuilder</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.importexport" class="Aws\ImportExport\ImportExportClient" lazy="true">
      <argument>ImportExport</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.inspector" class="Aws\Inspector\InspectorClient" lazy="true">
      <argument>Inspector</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.inspector2" class="Aws\Inspector2\Inspector2Client" lazy="true">
      <argument>Inspector2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotjobsdataplane" class="Aws\IoTJobsDataPlane\IoTJobsDataPlaneClient" lazy="true">
      <argument>IoTJobsDataPlane</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iot" class="Aws\Iot\IotClient" lazy="true">
      <argument>Iot</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iot1clickdevicesservice" class="Aws\IoT1ClickDevicesService\IoT1ClickDevicesServiceClient" lazy="true">
      <argument>IoT1ClickDevicesService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iot1clickprojects" class="Aws\IoT1ClickProjects\IoT1ClickProjectsClient" lazy="true">
      <argument>IoT1ClickProjects</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotanalytics" class="Aws\IoTAnalytics\IoTAnalyticsClient" lazy="true">
      <argument>IoTAnalytics</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotdeviceadvisor" class="Aws\IoTDeviceAdvisor\IoTDeviceAdvisorClient" lazy="true">
      <argument>IoTDeviceAdvisor</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ioteventsdata" class="Aws\IoTEventsData\IoTEventsDataClient" lazy="true">
      <argument>IoTEventsData</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotevents" class="Aws\IoTEvents\IoTEventsClient" lazy="true">
      <argument>IoTEvents</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotfleethub" class="Aws\IoTFleetHub\IoTFleetHubClient" lazy="true">
      <argument>IoTFleetHub</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotsecuretunneling" class="Aws\IoTSecureTunneling\IoTSecureTunnelingClient" lazy="true">
      <argument>IoTSecureTunneling</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotsitewise" class="Aws\IoTSiteWise\IoTSiteWiseClient" lazy="true">
      <argument>IoTSiteWise</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotthingsgraph" class="Aws\IoTThingsGraph\IoTThingsGraphClient" lazy="true">
      <argument>IoTThingsGraph</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iottwinmaker" class="Aws\IoTTwinMaker\IoTTwinMakerClient" lazy="true">
      <argument>IoTTwinMaker</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotwireless" class="Aws\IoTWireless\IoTWirelessClient" lazy="true">
      <argument>IoTWireless</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ivs" class="Aws\IVS\IVSClient" lazy="true">
      <argument>IVS</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ivschat" class="Aws\ivschat\ivschatClient" lazy="true">
      <argument>ivschat</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kafka" class="Aws\Kafka\KafkaClient" lazy="true">
      <argument>Kafka</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kafkaconnect" class="Aws\KafkaConnect\KafkaConnectClient" lazy="true">
      <argument>KafkaConnect</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kendra" class="Aws\kendra\kendraClient" lazy="true">
      <argument>kendra</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.keyspaces" class="Aws\Keyspaces\KeyspacesClient" lazy="true">
      <argument>Keyspaces</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kinesisvideoarchivedmedia" class="Aws\KinesisVideoArchivedMedia\KinesisVideoArchivedMediaClient" lazy="true">
      <argument>KinesisVideoArchivedMedia</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kinesisvideomedia" class="Aws\KinesisVideoMedia\KinesisVideoMediaClient" lazy="true">
      <argument>KinesisVideoMedia</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kinesisvideosignalingchannels" class="Aws\KinesisVideoSignalingChannels\KinesisVideoSignalingChannelsClient" lazy="true">
      <argument>KinesisVideoSignalingChannels</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kinesis" class="Aws\Kinesis\KinesisClient" lazy="true">
      <argument>Kinesis</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kinesisanalytics" class="Aws\KinesisAnalytics\KinesisAnalyticsClient" lazy="true">
      <argument>KinesisAnalytics</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kinesisanalyticsv2" class="Aws\KinesisAnalyticsV2\KinesisAnalyticsV2Client" lazy="true">
      <argument>KinesisAnalyticsV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kinesisvideo" class="Aws\KinesisVideo\KinesisVideoClient" lazy="true">
      <argument>KinesisVideo</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kms" class="Aws\Kms\KmsClient" lazy="true">
      <argument>Kms</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lakeformation" class="Aws\LakeFormation\LakeFormationClient" lazy="true">
      <argument>LakeFormation</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lambda" class="Aws\Lambda\LambdaClient" lazy="true">
      <argument>Lambda</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lexmodelbuildingservice" class="Aws\LexModelBuildingService\LexModelBuildingServiceClient" lazy="true">
      <argument>LexModelBuildingService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.licensemanager" class="Aws\LicenseManager\LicenseManagerClient" lazy="true">
      <argument>LicenseManager</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lightsail" class="Aws\Lightsail\LightsailClient" lazy="true">
      <argument>Lightsail</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.locationservice" class="Aws\LocationService\LocationServiceClient" lazy="true">
      <argument>LocationService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudwatchlogs" class="Aws\CloudWatchLogs\CloudWatchLogsClient" lazy="true">
      <argument>CloudWatchLogs</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lookoutequipment" class="Aws\LookoutEquipment\LookoutEquipmentClient" lazy="true">
      <argument>LookoutEquipment</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lookoutmetrics" class="Aws\LookoutMetrics\LookoutMetricsClient" lazy="true">
      <argument>LookoutMetrics</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lookoutforvision" class="Aws\LookoutforVision\LookoutforVisionClient" lazy="true">
      <argument>LookoutforVision</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mainframemodernization" class="Aws\MainframeModernization\MainframeModernizationClient" lazy="true">
      <argument>MainframeModernization</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.machinelearning" class="Aws\MachineLearning\MachineLearningClient" lazy="true">
      <argument>MachineLearning</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.macie" class="Aws\Macie\MacieClient" lazy="true">
      <argument>Macie</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.macie2" class="Aws\Macie2\Macie2Client" lazy="true">
      <argument>Macie2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.managedblockchain" class="Aws\ManagedBlockchain\ManagedBlockchainClient" lazy="true">
      <argument>ManagedBlockchain</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.marketplacecatalog" class="Aws\MarketplaceCatalog\MarketplaceCatalogClient" lazy="true">
      <argument>MarketplaceCatalog</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.marketplacecommerceanalytics" class="Aws\MarketplaceCommerceAnalytics\MarketplaceCommerceAnalyticsClient" lazy="true">
      <argument>MarketplaceCommerceAnalytics</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mediaconnect" class="Aws\MediaConnect\MediaConnectClient" lazy="true">
      <argument>MediaConnect</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mediaconvert" class="Aws\MediaConvert\MediaConvertClient" lazy="true">
      <argument>MediaConvert</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.medialive" class="Aws\MediaLive\MediaLiveClient" lazy="true">
      <argument>MediaLive</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mediapackagevod" class="Aws\MediaPackageVod\MediaPackageVodClient" lazy="true">
      <argument>MediaPackageVod</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mediapackage" class="Aws\MediaPackage\MediaPackageClient" lazy="true">
      <argument>MediaPackage</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mediastoredata" class="Aws\MediaStoreData\MediaStoreDataClient" lazy="true">
      <argument>MediaStoreData</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mediastore" class="Aws\MediaStore\MediaStoreClient" lazy="true">
      <argument>MediaStore</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mediatailor" class="Aws\MediaTailor\MediaTailorClient" lazy="true">
      <argument>MediaTailor</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.memorydb" class="Aws\MemoryDB\MemoryDBClient" lazy="true">
      <argument>MemoryDB</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.marketplacemetering" class="Aws\MarketplaceMetering\MarketplaceMeteringClient" lazy="true">
      <argument>MarketplaceMetering</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.migrationhub" class="Aws\MigrationHub\MigrationHubClient" lazy="true">
      <argument>MigrationHub</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mgn" class="Aws\mgn\mgnClient" lazy="true">
      <argument>mgn</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.migrationhubrefactorspaces" class="Aws\MigrationHubRefactorSpaces\MigrationHubRefactorSpacesClient" lazy="true">
      <argument>MigrationHubRefactorSpaces</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.migrationhubconfig" class="Aws\MigrationHubConfig\MigrationHubConfigClient" lazy="true">
      <argument>MigrationHubConfig</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.migrationhubstrategyrecommendations" class="Aws\MigrationHubStrategyRecommendations\MigrationHubStrategyRecommendationsClient" lazy="true">
      <argument>MigrationHubStrategyRecommendations</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mobile" class="Aws\Mobile\MobileClient" lazy="true">
      <argument>Mobile</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lexmodelsv2" class="Aws\LexModelsV2\LexModelsV2Client" lazy="true">
      <argument>LexModelsV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudwatch" class="Aws\CloudWatch\CloudWatchClient" lazy="true">
      <argument>CloudWatch</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mq" class="Aws\MQ\MQClient" lazy="true">
      <argument>MQ</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mturk" class="Aws\MTurk\MTurkClient" lazy="true">
      <argument>MTurk</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mwaa" class="Aws\MWAA\MWAAClient" lazy="true">
      <argument>MWAA</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.neptune" class="Aws\Neptune\NeptuneClient" lazy="true">
      <argument>Neptune</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.networkfirewall" class="Aws\NetworkFirewall\NetworkFirewallClient" lazy="true">
      <argument>NetworkFirewall</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.networkmanager" class="Aws\NetworkManager\NetworkManagerClient" lazy="true">
      <argument>NetworkManager</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.nimblestudio" class="Aws\NimbleStudio\NimbleStudioClient" lazy="true">
      <argument>NimbleStudio</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.opensearchservice" class="Aws\OpenSearchService\OpenSearchServiceClient" lazy="true">
      <argument>OpenSearchService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.opsworks" class="Aws\OpsWorks\OpsWorksClient" lazy="true">
      <argument>OpsWorks</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.opsworkscm" class="Aws\OpsWorksCM\OpsWorksCMClient" lazy="true">
      <argument>OpsWorksCM</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.organizations" class="Aws\Organizations\OrganizationsClient" lazy="true">
      <argument>Organizations</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.outposts" class="Aws\Outposts\OutpostsClient" lazy="true">
      <argument>Outposts</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.panorama" class="Aws\Panorama\PanoramaClient" lazy="true">
      <argument>Panorama</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.personalizeevents" class="Aws\PersonalizeEvents\PersonalizeEventsClient" lazy="true">
      <argument>PersonalizeEvents</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.personalizeruntime" class="Aws\PersonalizeRuntime\PersonalizeRuntimeClient" lazy="true">
      <argument>PersonalizeRuntime</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.personalize" class="Aws\Personalize\PersonalizeClient" lazy="true">
      <argument>Personalize</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.pi" class="Aws\PI\PIClient" lazy="true">
      <argument>PI</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.pinpointemail" class="Aws\PinpointEmail\PinpointEmailClient" lazy="true">
      <argument>PinpointEmail</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.pinpointsmsvoicev2" class="Aws\PinpointSMSVoiceV2\PinpointSMSVoiceV2Client" lazy="true">
      <argument>PinpointSMSVoiceV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.pinpoint" class="Aws\Pinpoint\PinpointClient" lazy="true">
      <argument>Pinpoint</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.polly" class="Aws\Polly\PollyClient" lazy="true">
      <argument>Polly</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.pricing" class="Aws\Pricing\PricingClient" lazy="true">
      <argument>Pricing</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.proton" class="Aws\Proton\ProtonClient" lazy="true">
      <argument>Proton</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.qldbsession" class="Aws\QLDBSession\QLDBSessionClient" lazy="true">
      <argument>QLDBSession</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.qldb" class="Aws\QLDB\QLDBClient" lazy="true">
      <argument>QLDB</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.quicksight" class="Aws\QuickSight\QuickSightClient" lazy="true">
      <argument>QuickSight</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ram" class="Aws\RAM\RAMClient" lazy="true">
      <argument>RAM</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.recyclebin" class="Aws\RecycleBin\RecycleBinClient" lazy="true">
      <argument>RecycleBin</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.rdsdataservice" class="Aws\RDSDataService\RDSDataServiceClient" lazy="true">
      <argument>RDSDataService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.rds" class="Aws\Rds\RdsClient" lazy="true">
      <argument>Rds</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.redshiftdataapiservice" class="Aws\RedshiftDataAPIService\RedshiftDataAPIServiceClient" lazy="true">
      <argument>RedshiftDataAPIService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.redshift" class="Aws\Redshift\RedshiftClient" lazy="true">
      <argument>Redshift</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.redshiftserverless" class="Aws\RedshiftServerless\RedshiftServerlessClient" lazy="true">
      <argument>RedshiftServerless</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.rekognition" class="Aws\Rekognition\RekognitionClient" lazy="true">
      <argument>Rekognition</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.resiliencehub" class="Aws\ResilienceHub\ResilienceHubClient" lazy="true">
      <argument>ResilienceHub</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.resourcegroups" class="Aws\ResourceGroups\ResourceGroupsClient" lazy="true">
      <argument>ResourceGroups</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.resourcegroupstaggingapi" class="Aws\ResourceGroupsTaggingAPI\ResourceGroupsTaggingAPIClient" lazy="true">
      <argument>ResourceGroupsTaggingAPI</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.robomaker" class="Aws\RoboMaker\RoboMakerClient" lazy="true">
      <argument>RoboMaker</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.route53recoverycluster" class="Aws\Route53RecoveryCluster\Route53RecoveryClusterClient" lazy="true">
      <argument>Route53RecoveryCluster</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.route53recoverycontrolconfig" class="Aws\Route53RecoveryControlConfig\Route53RecoveryControlConfigClient" lazy="true">
      <argument>Route53RecoveryControlConfig</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.route53recoveryreadiness" class="Aws\Route53RecoveryReadiness\Route53RecoveryReadinessClient" lazy="true">
      <argument>Route53RecoveryReadiness</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.route53" class="Aws\Route53\Route53Client" lazy="true">
      <argument>Route53</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.route53domains" class="Aws\Route53Domains\Route53DomainsClient" lazy="true">
      <argument>Route53Domains</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.route53resolver" class="Aws\Route53Resolver\Route53ResolverClient" lazy="true">
      <argument>Route53Resolver</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudwatchrum" class="Aws\CloudWatchRUM\CloudWatchRUMClient" lazy="true">
      <argument>CloudWatchRUM</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lexruntimev2" class="Aws\LexRuntimeV2\LexRuntimeV2Client" lazy="true">
      <argument>LexRuntimeV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lexruntimeservice" class="Aws\LexRuntimeService\LexRuntimeServiceClient" lazy="true">
      <argument>LexRuntimeService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sagemakerruntime" class="Aws\SageMakerRuntime\SageMakerRuntimeClient" lazy="true">
      <argument>SageMakerRuntime</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.s3" class="Aws\S3\S3Client" lazy="true">
      <argument>S3</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.s3control" class="Aws\S3Control\S3ControlClient" lazy="true">
      <argument>S3Control</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.s3outposts" class="Aws\S3Outposts\S3OutpostsClient" lazy="true">
      <argument>S3Outposts</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.augmentedairuntime" class="Aws\AugmentedAIRuntime\AugmentedAIRuntimeClient" lazy="true">
      <argument>AugmentedAIRuntime</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sagemakeredgemanager" class="Aws\SagemakerEdgeManager\SagemakerEdgeManagerClient" lazy="true">
      <argument>SagemakerEdgeManager</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sagemakerfeaturestoreruntime" class="Aws\SageMakerFeatureStoreRuntime\SageMakerFeatureStoreRuntimeClient" lazy="true">
      <argument>SageMakerFeatureStoreRuntime</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sagemaker" class="Aws\SageMaker\SageMakerClient" lazy="true">
      <argument>SageMaker</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.savingsplans" class="Aws\SavingsPlans\SavingsPlansClient" lazy="true">
      <argument>SavingsPlans</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.schemas" class="Aws\Schemas\SchemasClient" lazy="true">
      <argument>Schemas</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.secretsmanager" class="Aws\SecretsManager\SecretsManagerClient" lazy="true">
      <argument>SecretsManager</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.securityhub" class="Aws\SecurityHub\SecurityHubClient" lazy="true">
      <argument>SecurityHub</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.serverlessapplicationrepository" class="Aws\ServerlessApplicationRepository\ServerlessApplicationRepositoryClient" lazy="true">
      <argument>ServerlessApplicationRepository</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.servicequotas" class="Aws\ServiceQuotas\ServiceQuotasClient" lazy="true">
      <argument>ServiceQuotas</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.appregistry" class="Aws\AppRegistry\AppRegistryClient" lazy="true">
      <argument>AppRegistry</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.servicecatalog" class="Aws\ServiceCatalog\ServiceCatalogClient" lazy="true">
      <argument>ServiceCatalog</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.servicediscovery" class="Aws\ServiceDiscovery\ServiceDiscoveryClient" lazy="true">
      <argument>ServiceDiscovery</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sesv2" class="Aws\SesV2\SesV2Client" lazy="true">
      <argument>SesV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.shield" class="Aws\Shield\ShieldClient" lazy="true">
      <argument>Shield</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.signer" class="Aws\signer\signerClient" lazy="true">
      <argument>signer</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.pinpointsmsvoice" class="Aws\PinpointSMSVoice\PinpointSMSVoiceClient" lazy="true">
      <argument>PinpointSMSVoice</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sms" class="Aws\Sms\SmsClient" lazy="true">
      <argument>Sms</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.snowdevicemanagement" class="Aws\SnowDeviceManagement\SnowDeviceManagementClient" lazy="true">
      <argument>SnowDeviceManagement</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.snowball" class="Aws\SnowBall\SnowBallClient" lazy="true">
      <argument>SnowBall</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sns" class="Aws\Sns\SnsClient" lazy="true">
      <argument>Sns</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sqs" class="Aws\Sqs\SqsClient" lazy="true">
      <argument>Sqs</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ssmcontacts" class="Aws\SSMContacts\SSMContactsClient" lazy="true">
      <argument>SSMContacts</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ssmincidents" class="Aws\SSMIncidents\SSMIncidentsClient" lazy="true">
      <argument>SSMIncidents</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ssm" class="Aws\Ssm\SsmClient" lazy="true">
      <argument>Ssm</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ssoadmin" class="Aws\SSOAdmin\SSOAdminClient" lazy="true">
      <argument>SSOAdmin</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ssooidc" class="Aws\SSOOIDC\SSOOIDCClient" lazy="true">
      <argument>SSOOIDC</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sso" class="Aws\SSO\SSOClient" lazy="true">
      <argument>SSO</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sfn" class="Aws\Sfn\SfnClient" lazy="true">
      <argument>Sfn</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.storagegateway" class="Aws\StorageGateway\StorageGatewayClient" lazy="true">
      <argument>StorageGateway</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.dynamodbstreams" class="Aws\DynamoDbStreams\DynamoDbStreamsClient" lazy="true">
      <argument>DynamoDbStreams</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sts" class="Aws\Sts\StsClient" lazy="true">
      <argument>Sts</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.support" class="Aws\Support\SupportClient" lazy="true">
      <argument>Support</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.swf" class="Aws\Swf\SwfClient" lazy="true">
      <argument>Swf</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.synthetics" class="Aws\Synthetics\SyntheticsClient" lazy="true">
      <argument>Synthetics</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.textract" class="Aws\Textract\TextractClient" lazy="true">
      <argument>Textract</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.timestreamquery" class="Aws\TimestreamQuery\TimestreamQueryClient" lazy="true">
      <argument>TimestreamQuery</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.timestreamwrite" class="Aws\TimestreamWrite\TimestreamWriteClient" lazy="true">
      <argument>TimestreamWrite</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.transcribeservice" class="Aws\TranscribeService\TranscribeServiceClient" lazy="true">
      <argument>TranscribeService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.transfer" class="Aws\Transfer\TransferClient" lazy="true">
      <argument>Transfer</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.translate" class="Aws\Translate\TranslateClient" lazy="true">
      <argument>Translate</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.voiceid" class="Aws\VoiceID\VoiceIDClient" lazy="true">
      <argument>VoiceID</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.wafregional" class="Aws\WafRegional\WafRegionalClient" lazy="true">
      <argument>WafRegional</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.waf" class="Aws\Waf\WafClient" lazy="true">
      <argument>Waf</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.wafv2" class="Aws\WAFV2\WAFV2Client" lazy="true">
      <argument>WAFV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.wellarchitected" class="Aws\WellArchitected\WellArchitectedClient" lazy="true">
      <argument>WellArchitected</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.connectwisdomservice" class="Aws\ConnectWisdomService\ConnectWisdomServiceClient" lazy="true">
      <argument>ConnectWisdomService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.workdocs" class="Aws\WorkDocs\WorkDocsClient" lazy="true">
      <argument>WorkDocs</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.worklink" class="Aws\WorkLink\WorkLinkClient" lazy="true">
      <argument>WorkLink</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.workmail" class="Aws\WorkMail\WorkMailClient" lazy="true">
      <argument>WorkMail</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.workmailmessageflow" class="Aws\WorkMailMessageFlow\WorkMailMessageFlowClient" lazy="true">
      <argument>WorkMailMessageFlow</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.workspacesweb" class="Aws\WorkSpacesWeb\WorkSpacesWebClient" lazy="true">
      <argument>WorkSpacesWeb</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.workspaces" class="Aws\WorkSpaces\WorkSpacesClient" lazy="true">
      <argument>WorkSpaces</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.xray" class="Aws\XRay\XRayClient" lazy="true">
      <argument>XRay</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="knp_snappy.pdf" class="Knp\Snappy\Pdf" public="true">
      <tag name="monolog.logger" channel="snappy"/>
      <argument>/usr/bin/wkhtmltopdf</argument>
      <argument>%knp_snappy.pdf.options%</argument>
      <argument type="collection"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="knp_snappy.image" class="Knp\Snappy\Image" public="true">
      <tag name="monolog.logger" channel="snappy"/>
      <argument>%env(WKHTMLTOIMAGE_PATH)%</argument>
      <argument type="collection"/>
      <argument type="collection"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id=".1_bool~C_3F_UK" class="bool" public="false">
      <argument type="service" id="request_stack"/>
      <argument>true</argument>
      <factory class="Symfony\Bridge\Twig\ErrorRenderer\TwigErrorRenderer" method="isDebug"/>
    </service>
    <service id="twig" class="Twig\Environment" public="true">
      <argument type="service" id="twig.loader.native_filesystem"/>
      <argument type="collection">
        <argument key="debug">true</argument>
        <argument key="strict_variables">true</argument>
        <argument key="cache">false</argument>
        <argument key="autoescape">name</argument>
        <argument key="charset">UTF-8</argument>
      </argument>
      <call method="addExtension">
        <argument type="service" id="twig.extension.profiler"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.trans"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.code"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.routing"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.yaml"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.httpkernel"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.httpfoundation"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.debug"/>
      </call>
      <call method="addGlobal">
        <argument>app</argument>
        <argument type="service" id="twig.app_variable"/>
      </call>
      <call method="addRuntimeLoader">
        <argument type="service" id="twig.runtime_loader"/>
      </call>
      <configurator service="twig.configurator.environment" method="configure"/>
    </service>
    <service id="twig.app_variable" class="Symfony\Bridge\Twig\AppVariable" public="false">
      <call method="setEnvironment">
        <argument>dev</argument>
      </call>
      <call method="setDebug">
        <argument>true</argument>
      </call>
      <call method="setRequestStack">
        <argument type="service" id="request_stack" on-invalid="ignore"/>
      </call>
    </service>
    <service id="twig.template_iterator" class="Symfony\Bundle\TwigBundle\TemplateIterator" public="false">
      <argument type="service" id="kernel"/>
      <argument>/var/www/html/apps/backoffice/backend/src</argument>
      <argument type="collection">
        <argument key="/var/www/html/vendor/symfony/twig-bridge/Resources/views/Email">email</argument>
      </argument>
      <argument>/var/www/html/apps/backoffice/backend/templates</argument>
    </service>
    <service id="twig.loader.native_filesystem" class="Symfony\Bundle\TwigBundle\Loader\NativeFilesystemLoader" public="false">
      <tag name="twig.loader"/>
      <argument type="collection"/>
      <argument>/var/www/html/apps/backoffice/backend</argument>
      <call method="addPath">
        <argument>/var/www/html/vendor/symfony/framework-bundle/Resources/views</argument>
        <argument>Framework</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/html/vendor/symfony/framework-bundle/Resources/views</argument>
        <argument>!Framework</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/html/vendor/symfony/swiftmailer-bundle/Resources/views</argument>
        <argument>Swiftmailer</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/html/vendor/symfony/swiftmailer-bundle/Resources/views</argument>
        <argument>!Swiftmailer</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/html/vendor/symfony/twig-bundle/Resources/views</argument>
        <argument>Twig</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/html/vendor/symfony/twig-bundle/Resources/views</argument>
        <argument>!Twig</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/html/vendor/symfony/twig-bridge/Resources/views/Email</argument>
        <argument>email</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/html/vendor/symfony/twig-bridge/Resources/views/Email</argument>
        <argument>!email</argument>
      </call>
    </service>
    <service id="twig.loader.chain" class="Twig\Loader\ChainLoader" public="false"/>
    <service id="twig.extension.profiler" class="Symfony\Bridge\Twig\Extension\ProfilerExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="twig.profile"/>
      <argument>null</argument>
    </service>
    <service id="twig.profile" class="Twig\Profiler\Profile" public="false"/>
    <service id="data_collector.twig" class="Symfony\Bridge\Twig\DataCollector\TwigDataCollector" public="false">
      <tag name="data_collector" template="@WebProfiler/Collector/twig.html.twig" id="twig" priority="257"/>
      <argument type="service" id="twig.profile"/>
      <argument type="service" id="twig"/>
    </service>
    <service id="twig.extension.trans" class="Symfony\Bridge\Twig\Extension\TranslationExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="translator.default" on-invalid="null"/>
    </service>
    <service id="twig.extension.code" class="Symfony\Bridge\Twig\Extension\CodeExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="debug.file_link_formatter" on-invalid="ignore"/>
      <argument>/var/www/html/apps/backoffice/backend</argument>
      <argument>UTF-8</argument>
    </service>
    <service id="twig.extension.routing" class="Symfony\Bridge\Twig\Extension\RoutingExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="router.default"/>
    </service>
    <service id="twig.extension.yaml" class="Symfony\Bridge\Twig\Extension\YamlExtension" public="false">
      <tag name="twig.extension"/>
    </service>
    <service id="twig.extension.debug.stopwatch" class="Symfony\Bridge\Twig\Extension\StopwatchExtension" public="false">
      <argument>null</argument>
      <argument>true</argument>
    </service>
    <service id="twig.extension.httpkernel" class="Symfony\Bridge\Twig\Extension\HttpKernelExtension" public="false">
      <tag name="twig.extension"/>
    </service>
    <service id="twig.runtime.httpkernel" class="Symfony\Bridge\Twig\Extension\HttpKernelRuntime" public="false">
      <tag name="twig.runtime"/>
      <argument type="service" id="fragment.handler"/>
    </service>
    <service id="twig.extension.httpfoundation" class="Symfony\Bridge\Twig\Extension\HttpFoundationExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="url_helper"/>
    </service>
    <service id="twig.extension.debug" class="Twig\Extension\DebugExtension" public="false">
      <tag name="twig.extension"/>
    </service>
    <service id="twig.extension.weblink" class="Symfony\Bridge\Twig\Extension\WebLinkExtension" public="false">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="twig.translation.extractor" class="Symfony\Bridge\Twig\Translation\TwigExtractor" public="false">
      <tag name="translation.extractor" alias="twig"/>
      <argument type="service" id="twig"/>
    </service>
    <service id="twig.controller.exception" class="Symfony\Bundle\TwigBundle\Controller\ExceptionController" public="true">
      <argument type="service" id="twig"/>
      <argument>true</argument>
      <deprecated>The "%service_id%" service is deprecated since Symfony 4.4.</deprecated>
    </service>
    <service id="twig.controller.preview_error" class="Symfony\Bundle\TwigBundle\Controller\PreviewErrorController" public="true">
      <argument type="service" id="http_kernel"/>
      <argument>null</argument>
      <deprecated>The "%service_id%" service is deprecated since Symfony 4.4.</deprecated>
    </service>
    <service id="twig.configurator.environment" class="Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator" public="false">
      <argument>F j, Y H:i</argument>
      <argument>%d days</argument>
      <argument>null</argument>
      <argument>0</argument>
      <argument>.</argument>
      <argument>,</argument>
    </service>
    <service id="twig.runtime_loader" class="Twig\RuntimeLoader\ContainerRuntimeLoader" public="false">
      <argument type="service" id=".service_locator.UCasskA"/>
    </service>
    <service id="twig.error_renderer.html" class="Symfony\Bridge\Twig\ErrorRenderer\TwigErrorRenderer" public="false">
      <argument type="service" id="twig"/>
      <argument type="service" id="error_handler.error_renderer.html"/>
      <argument type="service" id=".1_bool~C_3F_UK"/>
    </service>
    <service id="twig.command.debug" class="Symfony\Bridge\Twig\Command\DebugCommand" public="false">
      <tag name="console.command" command="debug:twig"/>
      <argument type="service" id="twig"/>
      <argument>/var/www/html/apps/backoffice/backend</argument>
      <argument>%kernel.bundles_metadata%</argument>
      <argument>/var/www/html/apps/backoffice/backend/templates</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <argument>/var/www/html/apps/backoffice/backend/src</argument>
      <call method="setName">
        <argument>debug:twig</argument>
      </call>
    </service>
    <service id="twig.command.lint" class="Symfony\Bundle\TwigBundle\Command\LintCommand" public="false">
      <tag name="console.command" command="lint:twig"/>
      <argument type="service" id="twig"/>
      <call method="setName">
        <argument>lint:twig</argument>
      </call>
    </service>
    <service id=".instanceof.MyCoon\Shared\Domain\Bus\Command\CommandHandler.0.MyCoon\Backoffice\User\Application\Authentication\AuthenticateUserCommandHandler" class="MyCoon\Backoffice\User\Application\Authentication\AuthenticateUserCommandHandler" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.MyCoon\Backoffice\User\Application\Authentication\AuthenticateUserCommandHandler" class="MyCoon\Backoffice\User\Application\Authentication\AuthenticateUserCommandHandler" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.MyCoon\Shared\Domain\Bus\Command\CommandHandler.0.MyCoon\Backoffice\User\Application\Create\CreateUserCommandHandler" class="MyCoon\Backoffice\User\Application\Create\CreateUserCommandHandler" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.MyCoon\Backoffice\User\Application\Create\CreateUserCommandHandler" class="MyCoon\Backoffice\User\Application\Create\CreateUserCommandHandler" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.MyCoon\Shared\Domain\Bus\Query\QueryHandler.0.MyCoon\Backoffice\User\Application\Find\FindUserQueryHandler" class="MyCoon\Backoffice\User\Application\Find\FindUserQueryHandler" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.MyCoon\Backoffice\User\Application\Find\FindUserQueryHandler" class="MyCoon\Backoffice\User\Application\Find\FindUserQueryHandler" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.MyCoon\Shared\Domain\Bus\Query\QueryHandler.0.MyCoon\Backoffice\User\Application\GetUserByToken\GetUserByTokenQueryHandler" class="MyCoon\Backoffice\User\Application\GetUserByToken\GetUserByTokenQueryHandler" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.MyCoon\Backoffice\User\Application\GetUserByToken\GetUserByTokenQueryHandler" class="MyCoon\Backoffice\User\Application\GetUserByToken\GetUserByTokenQueryHandler" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.MyCoon\Shared\Domain\Bus\Query\QueryHandler.0.MyCoon\Backoffice\User\Application\Search\SearchUserQueryHandler" class="MyCoon\Backoffice\User\Application\Search\SearchUserQueryHandler" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.MyCoon\Backoffice\User\Application\Search\SearchUserQueryHandler" class="MyCoon\Backoffice\User\Application\Search\SearchUserQueryHandler" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.MyCoon\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware" class="MyCoon\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.MyCoon\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware" class="MyCoon\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.MyCoon\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware" class="MyCoon\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".service_locator.CmORmuK" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="base64" type="service_closure" id="container.env_var_processor"/>
        <argument key="bool" type="service_closure" id="container.env_var_processor"/>
        <argument key="const" type="service_closure" id="container.env_var_processor"/>
        <argument key="csv" type="service_closure" id="container.env_var_processor"/>
        <argument key="default" type="service_closure" id="container.env_var_processor"/>
        <argument key="file" type="service_closure" id="container.env_var_processor"/>
        <argument key="float" type="service_closure" id="container.env_var_processor"/>
        <argument key="int" type="service_closure" id="container.env_var_processor"/>
        <argument key="json" type="service_closure" id="container.env_var_processor"/>
        <argument key="key" type="service_closure" id="container.env_var_processor"/>
        <argument key="query_string" type="service_closure" id="container.env_var_processor"/>
        <argument key="require" type="service_closure" id="container.env_var_processor"/>
        <argument key="resolve" type="service_closure" id="container.env_var_processor"/>
        <argument key="string" type="service_closure" id="container.env_var_processor"/>
        <argument key="trim" type="service_closure" id="container.env_var_processor"/>
        <argument key="url" type="service_closure" id="container.env_var_processor"/>
      </argument>
    </service>
    <service id=".service_locator.OHd.zOp" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="event" type="service_closure" id=".errored..service_locator.OHd.zOp.Symfony\Component\HttpKernel\Event\RequestEvent"/>
      </argument>
    </service>
    <service id=".service_locator.lu7FCdF" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="MyCoon\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware::onKernelRequest" type="service_closure" id=".service_locator.OHd.zOp"/>
        <argument key="MyCoon\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware:onKernelRequest" type="service_closure" id=".service_locator.OHd.zOp"/>
      </argument>
    </service>
    <service id=".service_locator._cmka45" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="inline" type="service_closure" id="fragment.renderer.inline"/>
      </argument>
    </service>
    <service id="messenger.bus.default.middleware.add_bus_name_stamp_middleware" class="Symfony\Component\Messenger\Middleware\AddBusNameStampMiddleware" public="false">
      <argument>messenger.bus.default</argument>
    </service>
    <service id="messenger.bus.default.middleware.handle_message" class="Symfony\Component\Messenger\Middleware\HandleMessageMiddleware" public="false">
      <argument type="service" id="messenger.bus.default.messenger.handlers_locator"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id=".service_locator.CCTmIC0" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="messenger.bus.default" type="service_closure" id="messenger.bus.default"/>
      </argument>
    </service>
    <service id="messenger.bus.default.messenger.handlers_locator" class="Symfony\Component\Messenger\Handler\HandlersLocator">
      <argument type="collection"/>
    </service>
    <service id="logger" class="Symfony\Component\HttpKernel\Log\Logger" public="false"/>
    <service id=".service_locator.V.o0zE7" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="translation.loader.csv" type="service_closure" id="translation.loader.csv"/>
        <argument key="translation.loader.dat" type="service_closure" id="translation.loader.dat"/>
        <argument key="translation.loader.ini" type="service_closure" id="translation.loader.ini"/>
        <argument key="translation.loader.json" type="service_closure" id="translation.loader.json"/>
        <argument key="translation.loader.mo" type="service_closure" id="translation.loader.mo"/>
        <argument key="translation.loader.php" type="service_closure" id="translation.loader.php"/>
        <argument key="translation.loader.po" type="service_closure" id="translation.loader.po"/>
        <argument key="translation.loader.qt" type="service_closure" id="translation.loader.qt"/>
        <argument key="translation.loader.res" type="service_closure" id="translation.loader.res"/>
        <argument key="translation.loader.xliff" type="service_closure" id="translation.loader.xliff"/>
        <argument key="translation.loader.yml" type="service_closure" id="translation.loader.yml"/>
      </argument>
    </service>
    <service id=".service_locator.vdmMuyE" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="http_kernel" type="service_closure" id="http_kernel" on-invalid="ignore"/>
        <argument key="message_bus" type="service_closure" id="messenger.bus.default" on-invalid="ignore"/>
        <argument key="messenger.default_bus" type="service_closure" id="messenger.bus.default" on-invalid="ignore"/>
        <argument key="parameter_bag" type="service_closure" id="parameter_bag" on-invalid="ignore"/>
        <argument key="request_stack" type="service_closure" id="request_stack" on-invalid="ignore"/>
        <argument key="router" type="service_closure" id="router.default" on-invalid="ignore"/>
        <argument key="serializer" type="service_closure" id="serializer" on-invalid="ignore"/>
        <argument key="session" type="service_closure" id="session" on-invalid="ignore"/>
        <argument key="twig" type="service_closure" id="twig" on-invalid="ignore"/>
      </argument>
    </service>
    <service id=".service_locator.vdmMuyE.MyCoon\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator_context" id="MyCoon\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware"/>
      <argument>MyCoon\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.vdmMuyE" method="withContext"/>
    </service>
    <service id=".service_locator.XSes1R5" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="translator" type="service_closure" id="translator.default"/>
      </argument>
    </service>
    <service id=".service_locator.XSes1R5.translation.warmer" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator_context" id="translation.warmer"/>
      <argument>translation.warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.XSes1R5" method="withContext"/>
    </service>
    <service id=".service_locator.YrZrpzt" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="routing.loader" type="service_closure" id="routing.loader"/>
      </argument>
    </service>
    <service id=".service_locator.YrZrpzt.router.default" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator_context" id="router.default"/>
      <argument>router.default</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.YrZrpzt" method="withContext"/>
    </service>
    <service id=".service_locator.m90YCjy" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="router" type="service_closure" id="router.default"/>
      </argument>
    </service>
    <service id=".service_locator.m90YCjy.router.cache_warmer" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator_context" id="router.cache_warmer"/>
      <argument>router.cache_warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.m90YCjy" method="withContext"/>
    </service>
    <service id=".service_locator.wnlveDj" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="reverse_container" type="service_closure" id="reverse_container" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id=".service_locator.Bppmeg3" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="initialized_session" type="service_closure" id="session" on-invalid="ignore_uninitialized"/>
        <argument key="request_stack" type="service_closure" id="request_stack"/>
        <argument key="session" type="service_closure" id="session" on-invalid="ignore"/>
        <argument key="session_storage" type="service_closure" id="session.storage.native" on-invalid="ignore"/>
      </argument>
    </service>
    <service id=".service_locator.4hOlKMd" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="kernel" type="service_closure" id="kernel"/>
      </argument>
    </service>
    <service id=".errored..service_locator.OHd.zOp.Symfony\Component\HttpKernel\Event\RequestEvent" class="Symfony\Component\HttpKernel\Event\RequestEvent"/>
    <service id="console.command_loader" class="Symfony\Component\Console\CommandLoader\ContainerCommandLoader" public="true">
      <argument type="service" id=".service_locator.ola.eWS"/>
      <argument type="collection">
        <argument key="app:send-sound-notification">MyCoon\Apps\Backoffice\Backend\Command\SendSoundNotificationCommand</argument>
        <argument key="app:send-sms-to-user">MyCoon\Apps\Backoffice\Backend\Command\SendSMSToUserCommand</argument>
        <argument key="app:patch-meeting">MyCoon\Apps\Backoffice\Backend\Command\PatchMeetingCommand</argument>
        <argument key="app:patch-duplicate-person">MyCoon\Apps\Backoffice\Backend\Command\PatchDuplicatePersonCommand</argument>
        <argument key="app:patch-school-type">MyCoon\Apps\Backoffice\Backend\Command\PatchSchoolTypeCommand</argument>
        <argument key="about">console.command.about</argument>
        <argument key="assets:install">console.command.assets_install</argument>
        <argument key="cache:clear">console.command.cache_clear</argument>
        <argument key="cache:pool:clear">console.command.cache_pool_clear</argument>
        <argument key="cache:pool:prune">console.command.cache_pool_prune</argument>
        <argument key="cache:pool:delete">console.command.cache_pool_delete</argument>
        <argument key="cache:pool:list">console.command.cache_pool_list</argument>
        <argument key="cache:warmup">console.command.cache_warmup</argument>
        <argument key="debug:config">console.command.config_debug</argument>
        <argument key="config:dump-reference">console.command.config_dump_reference</argument>
        <argument key="debug:container">console.command.container_debug</argument>
        <argument key="lint:container">console.command.container_lint</argument>
        <argument key="debug:autowiring">console.command.debug_autowiring</argument>
        <argument key="debug:event-dispatcher">console.command.event_dispatcher_debug</argument>
        <argument key="messenger:consume">console.command.messenger_consume_messages</argument>
        <argument key="messenger:consume-messages">console.command.messenger_consume_messages</argument>
        <argument key="messenger:setup-transports">console.command.messenger_setup_transports</argument>
        <argument key="debug:messenger">console.command.messenger_debug</argument>
        <argument key="messenger:stop-workers">console.command.messenger_stop_workers</argument>
        <argument key="debug:router">console.command.router_debug</argument>
        <argument key="router:match">console.command.router_match</argument>
        <argument key="debug:translation">console.command.translation_debug</argument>
        <argument key="translation:update">console.command.translation_update</argument>
        <argument key="lint:xliff">console.command.xliff_lint</argument>
        <argument key="lint:yaml">console.command.yaml_lint</argument>
        <argument key="secrets:set">console.command.secrets_set</argument>
        <argument key="secrets:remove">console.command.secrets_remove</argument>
        <argument key="secrets:generate-keys">console.command.secrets_generate_key</argument>
        <argument key="secrets:list">console.command.secrets_list</argument>
        <argument key="secrets:decrypt-to-local">console.command.secrets_decrypt_to_local</argument>
        <argument key="secrets:encrypt-from-local">console.command.secrets_encrypt_from_local</argument>
        <argument key="debug:swiftmailer">swiftmailer.command.debug</argument>
        <argument key="swiftmailer:email:send">swiftmailer.command.new_email</argument>
        <argument key="swiftmailer:spool:send">swiftmailer.command.send_email</argument>
        <argument key="debug:twig">twig.command.debug</argument>
        <argument key="lint:twig">twig.command.lint</argument>
      </argument>
    </service>
    <service id=".service_locator.ola.eWS" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="MyCoon\Apps\Backoffice\Backend\Command\PatchDuplicatePersonCommand" type="service_closure" id="MyCoon\Apps\Backoffice\Backend\Command\PatchDuplicatePersonCommand"/>
        <argument key="MyCoon\Apps\Backoffice\Backend\Command\PatchMeetingCommand" type="service_closure" id="MyCoon\Apps\Backoffice\Backend\Command\PatchMeetingCommand"/>
        <argument key="MyCoon\Apps\Backoffice\Backend\Command\PatchSchoolTypeCommand" type="service_closure" id="MyCoon\Apps\Backoffice\Backend\Command\PatchSchoolTypeCommand"/>
        <argument key="MyCoon\Apps\Backoffice\Backend\Command\SendSMSToUserCommand" type="service_closure" id="MyCoon\Apps\Backoffice\Backend\Command\SendSMSToUserCommand"/>
        <argument key="MyCoon\Apps\Backoffice\Backend\Command\SendSoundNotificationCommand" type="service_closure" id="MyCoon\Apps\Backoffice\Backend\Command\SendSoundNotificationCommand"/>
        <argument key="console.command.about" type="service_closure" id="console.command.about"/>
        <argument key="console.command.assets_install" type="service_closure" id="console.command.assets_install"/>
        <argument key="console.command.cache_clear" type="service_closure" id="console.command.cache_clear"/>
        <argument key="console.command.cache_pool_clear" type="service_closure" id="console.command.cache_pool_clear"/>
        <argument key="console.command.cache_pool_delete" type="service_closure" id="console.command.cache_pool_delete"/>
        <argument key="console.command.cache_pool_list" type="service_closure" id="console.command.cache_pool_list"/>
        <argument key="console.command.cache_pool_prune" type="service_closure" id="console.command.cache_pool_prune"/>
        <argument key="console.command.cache_warmup" type="service_closure" id="console.command.cache_warmup"/>
        <argument key="console.command.config_debug" type="service_closure" id="console.command.config_debug"/>
        <argument key="console.command.config_dump_reference" type="service_closure" id="console.command.config_dump_reference"/>
        <argument key="console.command.container_debug" type="service_closure" id="console.command.container_debug"/>
        <argument key="console.command.container_lint" type="service_closure" id="console.command.container_lint"/>
        <argument key="console.command.debug_autowiring" type="service_closure" id="console.command.debug_autowiring"/>
        <argument key="console.command.event_dispatcher_debug" type="service_closure" id="console.command.event_dispatcher_debug"/>
        <argument key="console.command.messenger_consume_messages" type="service_closure" id="console.command.messenger_consume_messages"/>
        <argument key="console.command.messenger_debug" type="service_closure" id="console.command.messenger_debug"/>
        <argument key="console.command.messenger_setup_transports" type="service_closure" id="console.command.messenger_setup_transports"/>
        <argument key="console.command.messenger_stop_workers" type="service_closure" id="console.command.messenger_stop_workers"/>
        <argument key="console.command.router_debug" type="service_closure" id="console.command.router_debug"/>
        <argument key="console.command.router_match" type="service_closure" id="console.command.router_match"/>
        <argument key="console.command.secrets_decrypt_to_local" type="service_closure" id="console.command.secrets_decrypt_to_local"/>
        <argument key="console.command.secrets_encrypt_from_local" type="service_closure" id="console.command.secrets_encrypt_from_local"/>
        <argument key="console.command.secrets_generate_key" type="service_closure" id="console.command.secrets_generate_key"/>
        <argument key="console.command.secrets_list" type="service_closure" id="console.command.secrets_list"/>
        <argument key="console.command.secrets_remove" type="service_closure" id="console.command.secrets_remove"/>
        <argument key="console.command.secrets_set" type="service_closure" id="console.command.secrets_set"/>
        <argument key="console.command.translation_debug" type="service_closure" id="console.command.translation_debug"/>
        <argument key="console.command.translation_update" type="service_closure" id="console.command.translation_update"/>
        <argument key="console.command.xliff_lint" type="service_closure" id="console.command.xliff_lint"/>
        <argument key="console.command.yaml_lint" type="service_closure" id="console.command.yaml_lint"/>
        <argument key="swiftmailer.command.debug" type="service_closure" id="swiftmailer.command.debug"/>
        <argument key="swiftmailer.command.new_email" type="service_closure" id="swiftmailer.command.new_email"/>
        <argument key="swiftmailer.command.send_email" type="service_closure" id="swiftmailer.command.send_email"/>
        <argument key="twig.command.debug" type="service_closure" id="twig.command.debug"/>
        <argument key="twig.command.lint" type="service_closure" id="twig.command.lint"/>
      </argument>
    </service>
    <service id=".service_locator.UCasskA" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="Symfony\Bridge\Twig\Extension\HttpKernelRuntime" type="service_closure" id="twig.runtime.httpkernel"/>
      </argument>
    </service>
    <service id="Psr\Container\ContainerInterface" alias="service_container" public="false"/>
    <service id="Symfony\Component\DependencyInjection\ContainerInterface" alias="service_container" public="false"/>
    <service id="MyCoon\Shared\Domain\Bus\Event\EventBus" alias="MyCoon\Shared\Infrastructure\Bus\Event\InMemory\InMemorySymfonyEventBus"/>
    <service id="MyCoon\Backoffice\User\Domain\UserRepository" alias="MyCoon\Backoffice\User\Infrastructure\DoctrineUserRepository" public="false"/>
    <service id="MyCoon\Shared\Domain\Bus\Command\CommandBus" alias="MyCoon\Shared\Infrastructure\Bus\Command\InMemorySymfonyCommandBus" public="false"/>
    <service id="MyCoon\Shared\Domain\Bus\Query\QueryBus" alias="MyCoon\Shared\Infrastructure\Bus\Query\InMemorySymfonyQueryBus" public="false"/>
    <service id="MyCoon\Shared\Domain\Bus\Query\Response" alias="MyCoon\Backoffice\User\Application\GetUserByToken\GetUserByTokenResponse" public="false"/>
    <service id="MyCoon\Shared\Domain\Logger" alias="MyCoon\Shared\Infrastructure\Logger\MonologLogger" public="false"/>
    <service id="MyCoon\Shared\Domain\RandomNumberGenerator" alias="MyCoon\Shared\Infrastructure\PhpRandomNumberGenerator" public="false"/>
    <service id="MyCoon\Shared\Domain\UserLogged" alias="MyCoon\Shared\Infrastructure\Symfony\SymfonyUserLogged" public="false"/>
    <service id="controller_name_converter" alias=".legacy_controller_name_converter" public="false">
      <deprecated>The "%alias_id%" service is deprecated since Symfony 4.3.</deprecated>
    </service>
    <service id="resolve_controller_name_subscriber" alias=".legacy_resolve_controller_name_subscriber" public="false">
      <deprecated>The "%alias_id%" service is deprecated since Symfony 4.3.</deprecated>
    </service>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ContainerBagInterface" alias="parameter_bag" public="false"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface" alias="parameter_bag" public="false"/>
    <service id="Symfony\Component\EventDispatcher\EventDispatcherInterface" alias="event_dispatcher" public="false"/>
    <service id="Symfony\Contracts\EventDispatcher\EventDispatcherInterface" alias="event_dispatcher" public="false"/>
    <service id="Symfony\Component\HttpKernel\HttpKernelInterface" alias="http_kernel" public="false"/>
    <service id="Symfony\Component\HttpFoundation\RequestStack" alias="request_stack" public="false"/>
    <service id="Symfony\Component\HttpFoundation\UrlHelper" alias="url_helper" public="false"/>
    <service id="Symfony\Component\HttpKernel\KernelInterface" alias="kernel" public="false"/>
    <service id="Symfony\Component\Filesystem\Filesystem" alias="filesystem" public="false"/>
    <service id="Symfony\Component\HttpKernel\Config\FileLocator" alias="file_locator" public="false"/>
    <service id="Symfony\Component\DependencyInjection\ReverseContainer" alias="reverse_container" public="false"/>
    <service id="error_renderer.html" alias="twig.error_renderer.html"/>
    <service id="error_renderer" alias="error_handler.error_renderer.serializer" public="false"/>
    <service id="Psr\Container\ContainerInterface $parameterBag" alias="parameter_bag"/>
    <service id="cache.app_clearer" alias="cache.default_clearer" public="true"/>
    <service id="Psr\Cache\CacheItemPoolInterface" alias="cache.app" public="false"/>
    <service id="Psr\SimpleCache\CacheInterface" alias="cache.app.simple" public="false"/>
    <service id="Symfony\Component\Cache\Adapter\AdapterInterface" alias="cache.app" public="false"/>
    <service id="Symfony\Contracts\Cache\CacheInterface" alias="cache.app" public="false"/>
    <service id="Symfony\Contracts\Cache\TagAwareCacheInterface" alias="cache.app.taggable" public="false"/>
    <service id="Symfony\Component\Translation\TranslatorInterface" alias="translator.default" public="false"/>
    <service id="Symfony\Contracts\Translation\TranslatorInterface" alias="translator.default" public="false"/>
    <service id="cache.default_redis_provider" alias=".cache_connection.GD_MSZC" public="false"/>
    <service id="cache.default_memcached_provider" alias=".cache_connection.JKE6keX" public="false"/>
    <service id="cache.default_pdo_provider" alias="database_connection" public="false"/>
    <service id="Symfony\Component\HttpFoundation\Session\SessionInterface" alias="session" public="false"/>
    <service id="Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface" alias="session.storage.native" public="false"/>
    <service id="SessionHandlerInterface" alias="session.handler.native_file" public="false"/>
    <service id="Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface" alias="session.flash_bag" public="false"/>
    <service id="session.storage.filesystem" alias="session.storage.mock_file" public="false"/>
    <service id="session.storage" alias="session.storage.native"/>
    <service id="session.handler" alias="session.handler.native_file"/>
    <service id="Symfony\Component\Messenger\Transport\Serialization\SerializerInterface" alias="messenger.default_serializer" public="false"/>
    <service id="message_bus" alias="messenger.bus.default" public="true">
      <deprecated>The "%alias_id%" service is deprecated, use the "messenger.default_bus" service instead.</deprecated>
    </service>
    <service id="messenger.default_bus" alias="messenger.bus.default" public="true"/>
    <service id="Symfony\Component\Messenger\MessageBusInterface" alias="messenger.bus.default"/>
    <service id="Symfony\Contracts\HttpClient\HttpClientInterface" alias="http_client"/>
    <service id="Psr\Http\Client\ClientInterface" alias="psr18.http_client"/>
    <service id="Symfony\Component\Translation\Reader\TranslationReaderInterface" alias="translation.reader" public="false"/>
    <service id="Symfony\Component\Translation\Extractor\ExtractorInterface" alias="translation.extractor" public="false"/>
    <service id="Symfony\Component\Translation\Writer\TranslationWriterInterface" alias="translation.writer" public="false"/>
    <service id="translator" alias="translator.default" public="true"/>
    <service id="translator.formatter" alias="translator.formatter.default" public="false"/>
    <service id="Symfony\Component\HttpKernel\Debug\FileLinkFormatter" alias="debug.file_link_formatter" public="false"/>
    <service id="router" alias="router.default" public="true"/>
    <service id="Symfony\Component\Routing\RouterInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\Generator\UrlGeneratorInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\Matcher\UrlMatcherInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\RequestContextAwareInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\RequestContext" alias="router.request_context" public="false"/>
    <service id="annotation_reader" alias="annotations.cached_reader"/>
    <service id="Doctrine\Common\Annotations\Reader" alias="annotations.cached_reader" public="false"/>
    <service id="Symfony\Component\Serializer\SerializerInterface" alias="serializer" public="false"/>
    <service id="Symfony\Component\Serializer\Normalizer\NormalizerInterface" alias="serializer" public="false"/>
    <service id="Symfony\Component\Serializer\Normalizer\DenormalizerInterface" alias="serializer" public="false"/>
    <service id="Symfony\Component\Serializer\Encoder\EncoderInterface" alias="serializer" public="false"/>
    <service id="Symfony\Component\Serializer\Encoder\DecoderInterface" alias="serializer" public="false"/>
    <service id="Symfony\Component\Serializer\Mapping\ClassDiscriminatorResolverInterface" alias="serializer.mapping.class_discriminator_resolver" public="false"/>
    <service id="Symfony\Component\Serializer\Normalizer\ObjectNormalizer" alias="serializer.normalizer.object" public="false"/>
    <service id="Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactoryInterface" alias="serializer.mapping.class_metadata_factory" public="false"/>
    <service id="error_renderer.serializer" alias="error_handler.error_renderer.serializer" public="false"/>
    <service id="Symfony\Component\Mime\MimeTypesInterface" alias="mime_types" public="false"/>
    <service id="Symfony\Component\Mime\MimeTypeGuesserInterface" alias="mime_types" public="false"/>
    <service id="Behat\Mink\Mink" alias="behat.mink"/>
    <service id="Behat\Mink\Session" alias="behat.mink.default_session"/>
    <service id="FriendsOfBehat\SymfonyExtension\Mink\MinkParameters" alias="behat.mink.parameters"/>
    <service id="Symfony\Component\DependencyInjection\ContainerInterface $driverContainer" alias="behat.driver.service_container"/>
    <service id="swiftmailer.mailer.default.transport" alias="swiftmailer.mailer.default.transport.spool"/>
    <service id="swiftmailer.mailer.default.spool" alias="swiftmailer.mailer.default.spool.memory"/>
    <service id="swiftmailer.mailer.default.transport.real" alias="swiftmailer.mailer.default.transport.dynamic" public="true"/>
    <service id="swiftmailer.spool" alias="swiftmailer.mailer.default.spool.memory"/>
    <service id="swiftmailer.transport.real" alias="swiftmailer.mailer.default.transport.dynamic"/>
    <service id="Swift_Spool" alias="swiftmailer.mailer.default.spool.memory" public="false"/>
    <service id="swiftmailer.plugin.messagelogger" alias="swiftmailer.mailer.default.plugin.messagelogger"/>
    <service id="swiftmailer.mailer" alias="swiftmailer.mailer.default"/>
    <service id="swiftmailer.transport" alias="swiftmailer.mailer.default.transport.spool" public="true"/>
    <service id="Swift_Mailer" alias="swiftmailer.mailer.default" public="false"/>
    <service id="Swift_Transport" alias="swiftmailer.mailer.default.transport.spool" public="false"/>
    <service id="mailer" alias="swiftmailer.mailer.default" public="true"/>
    <service id="Aws\AccessAnalyzer\AccessAnalyzerClient" alias="aws.accessanalyzer"/>
    <service id="Aws\Account\AccountClient" alias="aws.account"/>
    <service id="Aws\ACMPCA\ACMPCAClient" alias="aws.acmpca"/>
    <service id="Aws\Acm\AcmClient" alias="aws.acm"/>
    <service id="Aws\AlexaForBusiness\AlexaForBusinessClient" alias="aws.alexaforbusiness"/>
    <service id="Aws\PrometheusService\PrometheusServiceClient" alias="aws.prometheusservice"/>
    <service id="Aws\Amplify\AmplifyClient" alias="aws.amplify"/>
    <service id="Aws\AmplifyBackend\AmplifyBackendClient" alias="aws.amplifybackend"/>
    <service id="Aws\AmplifyUIBuilder\AmplifyUIBuilderClient" alias="aws.amplifyuibuilder"/>
    <service id="Aws\ApiGateway\ApiGatewayClient" alias="aws.apigateway"/>
    <service id="Aws\ApiGatewayManagementApi\ApiGatewayManagementApiClient" alias="aws.apigatewaymanagementapi"/>
    <service id="Aws\ApiGatewayV2\ApiGatewayV2Client" alias="aws.apigatewayv2"/>
    <service id="Aws\AppConfig\AppConfigClient" alias="aws.appconfig"/>
    <service id="Aws\AppConfigData\AppConfigDataClient" alias="aws.appconfigdata"/>
    <service id="Aws\Appflow\AppflowClient" alias="aws.appflow"/>
    <service id="Aws\AppIntegrationsService\AppIntegrationsServiceClient" alias="aws.appintegrationsservice"/>
    <service id="Aws\ApplicationAutoScaling\ApplicationAutoScalingClient" alias="aws.applicationautoscaling"/>
    <service id="Aws\ApplicationInsights\ApplicationInsightsClient" alias="aws.applicationinsights"/>
    <service id="Aws\ApplicationCostProfiler\ApplicationCostProfilerClient" alias="aws.applicationcostprofiler"/>
    <service id="Aws\AppMesh\AppMeshClient" alias="aws.appmesh"/>
    <service id="Aws\AppRunner\AppRunnerClient" alias="aws.apprunner"/>
    <service id="Aws\Appstream\AppstreamClient" alias="aws.appstream"/>
    <service id="Aws\AppSync\AppSyncClient" alias="aws.appsync"/>
    <service id="Aws\Athena\AthenaClient" alias="aws.athena"/>
    <service id="Aws\AuditManager\AuditManagerClient" alias="aws.auditmanager"/>
    <service id="Aws\AutoScalingPlans\AutoScalingPlansClient" alias="aws.autoscalingplans"/>
    <service id="Aws\AutoScaling\AutoScalingClient" alias="aws.autoscaling"/>
    <service id="Aws\BackupGateway\BackupGatewayClient" alias="aws.backupgateway"/>
    <service id="Aws\Backup\BackupClient" alias="aws.backup"/>
    <service id="Aws\Batch\BatchClient" alias="aws.batch"/>
    <service id="Aws\BillingConductor\BillingConductorClient" alias="aws.billingconductor"/>
    <service id="Aws\Braket\BraketClient" alias="aws.braket"/>
    <service id="Aws\Budgets\BudgetsClient" alias="aws.budgets"/>
    <service id="Aws\CostExplorer\CostExplorerClient" alias="aws.costexplorer"/>
    <service id="Aws\ChimeSDKIdentity\ChimeSDKIdentityClient" alias="aws.chimesdkidentity"/>
    <service id="Aws\ChimeSDKMediaPipelines\ChimeSDKMediaPipelinesClient" alias="aws.chimesdkmediapipelines"/>
    <service id="Aws\ChimeSDKMeetings\ChimeSDKMeetingsClient" alias="aws.chimesdkmeetings"/>
    <service id="Aws\ChimeSDKMessaging\ChimeSDKMessagingClient" alias="aws.chimesdkmessaging"/>
    <service id="Aws\Chime\ChimeClient" alias="aws.chime"/>
    <service id="Aws\Cloud9\Cloud9Client" alias="aws.cloud9"/>
    <service id="Aws\CloudControlApi\CloudControlApiClient" alias="aws.cloudcontrolapi"/>
    <service id="Aws\CloudDirectory\CloudDirectoryClient" alias="aws.clouddirectory"/>
    <service id="Aws\CloudFormation\CloudFormationClient" alias="aws.cloudformation"/>
    <service id="Aws\CloudFront\CloudFrontClient" alias="aws.cloudfront"/>
    <service id="Aws\CloudHsm\CloudHsmClient" alias="aws.cloudhsm"/>
    <service id="Aws\CloudHSMV2\CloudHSMV2Client" alias="aws.cloudhsmv2"/>
    <service id="Aws\CloudSearch\CloudSearchClient" alias="aws.cloudsearch"/>
    <service id="Aws\CloudSearchDomain\CloudSearchDomainClient" alias="aws.cloudsearchdomain"/>
    <service id="Aws\CloudTrail\CloudTrailClient" alias="aws.cloudtrail"/>
    <service id="Aws\CodeArtifact\CodeArtifactClient" alias="aws.codeartifact"/>
    <service id="Aws\CodeBuild\CodeBuildClient" alias="aws.codebuild"/>
    <service id="Aws\CodeCommit\CodeCommitClient" alias="aws.codecommit"/>
    <service id="Aws\CodeDeploy\CodeDeployClient" alias="aws.codedeploy"/>
    <service id="Aws\CodeGuruReviewer\CodeGuruReviewerClient" alias="aws.codegurureviewer"/>
    <service id="Aws\CodeGuruProfiler\CodeGuruProfilerClient" alias="aws.codeguruprofiler"/>
    <service id="Aws\CodePipeline\CodePipelineClient" alias="aws.codepipeline"/>
    <service id="Aws\CodeStarconnections\CodeStarconnectionsClient" alias="aws.codestarconnections"/>
    <service id="Aws\CodeStarNotifications\CodeStarNotificationsClient" alias="aws.codestarnotifications"/>
    <service id="Aws\CodeStar\CodeStarClient" alias="aws.codestar"/>
    <service id="Aws\CognitoIdentity\CognitoIdentityClient" alias="aws.cognitoidentity"/>
    <service id="Aws\CognitoIdentityProvider\CognitoIdentityProviderClient" alias="aws.cognitoidentityprovider"/>
    <service id="Aws\CognitoSync\CognitoSyncClient" alias="aws.cognitosync"/>
    <service id="Aws\Comprehend\ComprehendClient" alias="aws.comprehend"/>
    <service id="Aws\ComprehendMedical\ComprehendMedicalClient" alias="aws.comprehendmedical"/>
    <service id="Aws\ComputeOptimizer\ComputeOptimizerClient" alias="aws.computeoptimizer"/>
    <service id="Aws\ConfigService\ConfigServiceClient" alias="aws.configservice"/>
    <service id="Aws\ConnectContactLens\ConnectContactLensClient" alias="aws.connectcontactlens"/>
    <service id="Aws\Connect\ConnectClient" alias="aws.connect"/>
    <service id="Aws\ConnectCampaignService\ConnectCampaignServiceClient" alias="aws.connectcampaignservice"/>
    <service id="Aws\ConnectParticipant\ConnectParticipantClient" alias="aws.connectparticipant"/>
    <service id="Aws\CostandUsageReportService\CostandUsageReportServiceClient" alias="aws.costandusagereportservice"/>
    <service id="Aws\CustomerProfiles\CustomerProfilesClient" alias="aws.customerprofiles"/>
    <service id="Aws\IotDataPlane\IotDataPlaneClient" alias="aws.iotdataplane"/>
    <service id="Aws\GlueDataBrew\GlueDataBrewClient" alias="aws.gluedatabrew"/>
    <service id="Aws\DataExchange\DataExchangeClient" alias="aws.dataexchange"/>
    <service id="Aws\DataPipeline\DataPipelineClient" alias="aws.datapipeline"/>
    <service id="Aws\DataSync\DataSyncClient" alias="aws.datasync"/>
    <service id="Aws\DAX\DAXClient" alias="aws.dax"/>
    <service id="Aws\Detective\DetectiveClient" alias="aws.detective"/>
    <service id="Aws\DeviceFarm\DeviceFarmClient" alias="aws.devicefarm"/>
    <service id="Aws\DevOpsGuru\DevOpsGuruClient" alias="aws.devopsguru"/>
    <service id="Aws\DirectConnect\DirectConnectClient" alias="aws.directconnect"/>
    <service id="Aws\ApplicationDiscoveryService\ApplicationDiscoveryServiceClient" alias="aws.applicationdiscoveryservice"/>
    <service id="Aws\DLM\DLMClient" alias="aws.dlm"/>
    <service id="Aws\DatabaseMigrationService\DatabaseMigrationServiceClient" alias="aws.databasemigrationservice"/>
    <service id="Aws\DocDB\DocDBClient" alias="aws.docdb"/>
    <service id="Aws\drs\drsClient" alias="aws.drs"/>
    <service id="Aws\DirectoryService\DirectoryServiceClient" alias="aws.directoryservice"/>
    <service id="Aws\DynamoDb\DynamoDbClient" alias="aws.dynamodb"/>
    <service id="Aws\EBS\EBSClient" alias="aws.ebs"/>
    <service id="Aws\EC2InstanceConnect\EC2InstanceConnectClient" alias="aws.ec2instanceconnect"/>
    <service id="Aws\Ec2\Ec2Client" alias="aws.ec2"/>
    <service id="Aws\ECRPublic\ECRPublicClient" alias="aws.ecrpublic"/>
    <service id="Aws\Ecr\EcrClient" alias="aws.ecr"/>
    <service id="Aws\Ecs\EcsClient" alias="aws.ecs"/>
    <service id="Aws\EKS\EKSClient" alias="aws.eks"/>
    <service id="Aws\ElasticInference\ElasticInferenceClient" alias="aws.elasticinference"/>
    <service id="Aws\ElastiCache\ElastiCacheClient" alias="aws.elasticache"/>
    <service id="Aws\ElasticBeanstalk\ElasticBeanstalkClient" alias="aws.elasticbeanstalk"/>
    <service id="Aws\Efs\EfsClient" alias="aws.efs"/>
    <service id="Aws\ElasticLoadBalancing\ElasticLoadBalancingClient" alias="aws.elasticloadbalancing"/>
    <service id="Aws\ElasticLoadBalancingV2\ElasticLoadBalancingV2Client" alias="aws.elasticloadbalancingv2"/>
    <service id="Aws\Emr\EmrClient" alias="aws.emr"/>
    <service id="Aws\ElasticTranscoder\ElasticTranscoderClient" alias="aws.elastictranscoder"/>
    <service id="Aws\Ses\SesClient" alias="aws.ses"/>
    <service id="Aws\EMRContainers\EMRContainersClient" alias="aws.emrcontainers"/>
    <service id="Aws\EMRServerless\EMRServerlessClient" alias="aws.emrserverless"/>
    <service id="Aws\MarketplaceEntitlementService\MarketplaceEntitlementServiceClient" alias="aws.marketplaceentitlementservice"/>
    <service id="Aws\ElasticsearchService\ElasticsearchServiceClient" alias="aws.elasticsearchservice"/>
    <service id="Aws\EventBridge\EventBridgeClient" alias="aws.eventbridge"/>
    <service id="Aws\CloudWatchEvents\CloudWatchEventsClient" alias="aws.cloudwatchevents"/>
    <service id="Aws\CloudWatchEvidently\CloudWatchEvidentlyClient" alias="aws.cloudwatchevidently"/>
    <service id="Aws\FinSpaceData\FinSpaceDataClient" alias="aws.finspacedata"/>
    <service id="Aws\finspace\finspaceClient" alias="aws.finspace"/>
    <service id="Aws\Firehose\FirehoseClient" alias="aws.firehose"/>
    <service id="Aws\FIS\FISClient" alias="aws.fis"/>
    <service id="Aws\FMS\FMSClient" alias="aws.fms"/>
    <service id="Aws\ForecastService\ForecastServiceClient" alias="aws.forecastservice"/>
    <service id="Aws\ForecastQueryService\ForecastQueryServiceClient" alias="aws.forecastqueryservice"/>
    <service id="Aws\FraudDetector\FraudDetectorClient" alias="aws.frauddetector"/>
    <service id="Aws\FSx\FSxClient" alias="aws.fsx"/>
    <service id="Aws\GameLift\GameLiftClient" alias="aws.gamelift"/>
    <service id="Aws\GameSparks\GameSparksClient" alias="aws.gamesparks"/>
    <service id="Aws\Glacier\GlacierClient" alias="aws.glacier"/>
    <service id="Aws\GlobalAccelerator\GlobalAcceleratorClient" alias="aws.globalaccelerator"/>
    <service id="Aws\Glue\GlueClient" alias="aws.glue"/>
    <service id="Aws\ManagedGrafana\ManagedGrafanaClient" alias="aws.managedgrafana"/>
    <service id="Aws\Greengrass\GreengrassClient" alias="aws.greengrass"/>
    <service id="Aws\GreengrassV2\GreengrassV2Client" alias="aws.greengrassv2"/>
    <service id="Aws\GroundStation\GroundStationClient" alias="aws.groundstation"/>
    <service id="Aws\GuardDuty\GuardDutyClient" alias="aws.guardduty"/>
    <service id="Aws\Health\HealthClient" alias="aws.health"/>
    <service id="Aws\HealthLake\HealthLakeClient" alias="aws.healthlake"/>
    <service id="Aws\Honeycode\HoneycodeClient" alias="aws.honeycode"/>
    <service id="Aws\Iam\IamClient" alias="aws.iam"/>
    <service id="Aws\IdentityStore\IdentityStoreClient" alias="aws.identitystore"/>
    <service id="Aws\imagebuilder\imagebuilderClient" alias="aws.imagebuilder"/>
    <service id="Aws\ImportExport\ImportExportClient" alias="aws.importexport"/>
    <service id="Aws\Inspector\InspectorClient" alias="aws.inspector"/>
    <service id="Aws\Inspector2\Inspector2Client" alias="aws.inspector2"/>
    <service id="Aws\IoTJobsDataPlane\IoTJobsDataPlaneClient" alias="aws.iotjobsdataplane"/>
    <service id="Aws\Iot\IotClient" alias="aws.iot"/>
    <service id="Aws\IoT1ClickDevicesService\IoT1ClickDevicesServiceClient" alias="aws.iot1clickdevicesservice"/>
    <service id="Aws\IoT1ClickProjects\IoT1ClickProjectsClient" alias="aws.iot1clickprojects"/>
    <service id="Aws\IoTAnalytics\IoTAnalyticsClient" alias="aws.iotanalytics"/>
    <service id="Aws\IoTDeviceAdvisor\IoTDeviceAdvisorClient" alias="aws.iotdeviceadvisor"/>
    <service id="Aws\IoTEventsData\IoTEventsDataClient" alias="aws.ioteventsdata"/>
    <service id="Aws\IoTEvents\IoTEventsClient" alias="aws.iotevents"/>
    <service id="Aws\IoTFleetHub\IoTFleetHubClient" alias="aws.iotfleethub"/>
    <service id="Aws\IoTSecureTunneling\IoTSecureTunnelingClient" alias="aws.iotsecuretunneling"/>
    <service id="Aws\IoTSiteWise\IoTSiteWiseClient" alias="aws.iotsitewise"/>
    <service id="Aws\IoTThingsGraph\IoTThingsGraphClient" alias="aws.iotthingsgraph"/>
    <service id="Aws\IoTTwinMaker\IoTTwinMakerClient" alias="aws.iottwinmaker"/>
    <service id="Aws\IoTWireless\IoTWirelessClient" alias="aws.iotwireless"/>
    <service id="Aws\IVS\IVSClient" alias="aws.ivs"/>
    <service id="Aws\ivschat\ivschatClient" alias="aws.ivschat"/>
    <service id="Aws\Kafka\KafkaClient" alias="aws.kafka"/>
    <service id="Aws\KafkaConnect\KafkaConnectClient" alias="aws.kafkaconnect"/>
    <service id="Aws\kendra\kendraClient" alias="aws.kendra"/>
    <service id="Aws\Keyspaces\KeyspacesClient" alias="aws.keyspaces"/>
    <service id="Aws\KinesisVideoArchivedMedia\KinesisVideoArchivedMediaClient" alias="aws.kinesisvideoarchivedmedia"/>
    <service id="Aws\KinesisVideoMedia\KinesisVideoMediaClient" alias="aws.kinesisvideomedia"/>
    <service id="Aws\KinesisVideoSignalingChannels\KinesisVideoSignalingChannelsClient" alias="aws.kinesisvideosignalingchannels"/>
    <service id="Aws\Kinesis\KinesisClient" alias="aws.kinesis"/>
    <service id="Aws\KinesisAnalytics\KinesisAnalyticsClient" alias="aws.kinesisanalytics"/>
    <service id="Aws\KinesisAnalyticsV2\KinesisAnalyticsV2Client" alias="aws.kinesisanalyticsv2"/>
    <service id="Aws\KinesisVideo\KinesisVideoClient" alias="aws.kinesisvideo"/>
    <service id="Aws\Kms\KmsClient" alias="aws.kms"/>
    <service id="Aws\LakeFormation\LakeFormationClient" alias="aws.lakeformation"/>
    <service id="Aws\Lambda\LambdaClient" alias="aws.lambda"/>
    <service id="Aws\LexModelBuildingService\LexModelBuildingServiceClient" alias="aws.lexmodelbuildingservice"/>
    <service id="Aws\LicenseManager\LicenseManagerClient" alias="aws.licensemanager"/>
    <service id="Aws\Lightsail\LightsailClient" alias="aws.lightsail"/>
    <service id="Aws\LocationService\LocationServiceClient" alias="aws.locationservice"/>
    <service id="Aws\CloudWatchLogs\CloudWatchLogsClient" alias="aws.cloudwatchlogs"/>
    <service id="Aws\LookoutEquipment\LookoutEquipmentClient" alias="aws.lookoutequipment"/>
    <service id="Aws\LookoutMetrics\LookoutMetricsClient" alias="aws.lookoutmetrics"/>
    <service id="Aws\LookoutforVision\LookoutforVisionClient" alias="aws.lookoutforvision"/>
    <service id="Aws\MainframeModernization\MainframeModernizationClient" alias="aws.mainframemodernization"/>
    <service id="Aws\MachineLearning\MachineLearningClient" alias="aws.machinelearning"/>
    <service id="Aws\Macie\MacieClient" alias="aws.macie"/>
    <service id="Aws\Macie2\Macie2Client" alias="aws.macie2"/>
    <service id="Aws\ManagedBlockchain\ManagedBlockchainClient" alias="aws.managedblockchain"/>
    <service id="Aws\MarketplaceCatalog\MarketplaceCatalogClient" alias="aws.marketplacecatalog"/>
    <service id="Aws\MarketplaceCommerceAnalytics\MarketplaceCommerceAnalyticsClient" alias="aws.marketplacecommerceanalytics"/>
    <service id="Aws\MediaConnect\MediaConnectClient" alias="aws.mediaconnect"/>
    <service id="Aws\MediaConvert\MediaConvertClient" alias="aws.mediaconvert"/>
    <service id="Aws\MediaLive\MediaLiveClient" alias="aws.medialive"/>
    <service id="Aws\MediaPackageVod\MediaPackageVodClient" alias="aws.mediapackagevod"/>
    <service id="Aws\MediaPackage\MediaPackageClient" alias="aws.mediapackage"/>
    <service id="Aws\MediaStoreData\MediaStoreDataClient" alias="aws.mediastoredata"/>
    <service id="Aws\MediaStore\MediaStoreClient" alias="aws.mediastore"/>
    <service id="Aws\MediaTailor\MediaTailorClient" alias="aws.mediatailor"/>
    <service id="Aws\MemoryDB\MemoryDBClient" alias="aws.memorydb"/>
    <service id="Aws\MarketplaceMetering\MarketplaceMeteringClient" alias="aws.marketplacemetering"/>
    <service id="Aws\MigrationHub\MigrationHubClient" alias="aws.migrationhub"/>
    <service id="Aws\mgn\mgnClient" alias="aws.mgn"/>
    <service id="Aws\MigrationHubRefactorSpaces\MigrationHubRefactorSpacesClient" alias="aws.migrationhubrefactorspaces"/>
    <service id="Aws\MigrationHubConfig\MigrationHubConfigClient" alias="aws.migrationhubconfig"/>
    <service id="Aws\MigrationHubStrategyRecommendations\MigrationHubStrategyRecommendationsClient" alias="aws.migrationhubstrategyrecommendations"/>
    <service id="Aws\Mobile\MobileClient" alias="aws.mobile"/>
    <service id="Aws\LexModelsV2\LexModelsV2Client" alias="aws.lexmodelsv2"/>
    <service id="Aws\CloudWatch\CloudWatchClient" alias="aws.cloudwatch"/>
    <service id="Aws\MQ\MQClient" alias="aws.mq"/>
    <service id="Aws\MTurk\MTurkClient" alias="aws.mturk"/>
    <service id="Aws\MWAA\MWAAClient" alias="aws.mwaa"/>
    <service id="Aws\Neptune\NeptuneClient" alias="aws.neptune"/>
    <service id="Aws\NetworkFirewall\NetworkFirewallClient" alias="aws.networkfirewall"/>
    <service id="Aws\NetworkManager\NetworkManagerClient" alias="aws.networkmanager"/>
    <service id="Aws\NimbleStudio\NimbleStudioClient" alias="aws.nimblestudio"/>
    <service id="Aws\OpenSearchService\OpenSearchServiceClient" alias="aws.opensearchservice"/>
    <service id="Aws\OpsWorks\OpsWorksClient" alias="aws.opsworks"/>
    <service id="Aws\OpsWorksCM\OpsWorksCMClient" alias="aws.opsworkscm"/>
    <service id="Aws\Organizations\OrganizationsClient" alias="aws.organizations"/>
    <service id="Aws\Outposts\OutpostsClient" alias="aws.outposts"/>
    <service id="Aws\Panorama\PanoramaClient" alias="aws.panorama"/>
    <service id="Aws\PersonalizeEvents\PersonalizeEventsClient" alias="aws.personalizeevents"/>
    <service id="Aws\PersonalizeRuntime\PersonalizeRuntimeClient" alias="aws.personalizeruntime"/>
    <service id="Aws\Personalize\PersonalizeClient" alias="aws.personalize"/>
    <service id="Aws\PI\PIClient" alias="aws.pi"/>
    <service id="Aws\PinpointEmail\PinpointEmailClient" alias="aws.pinpointemail"/>
    <service id="Aws\PinpointSMSVoiceV2\PinpointSMSVoiceV2Client" alias="aws.pinpointsmsvoicev2"/>
    <service id="Aws\Pinpoint\PinpointClient" alias="aws.pinpoint"/>
    <service id="Aws\Polly\PollyClient" alias="aws.polly"/>
    <service id="Aws\Pricing\PricingClient" alias="aws.pricing"/>
    <service id="Aws\Proton\ProtonClient" alias="aws.proton"/>
    <service id="Aws\QLDBSession\QLDBSessionClient" alias="aws.qldbsession"/>
    <service id="Aws\QLDB\QLDBClient" alias="aws.qldb"/>
    <service id="Aws\QuickSight\QuickSightClient" alias="aws.quicksight"/>
    <service id="Aws\RAM\RAMClient" alias="aws.ram"/>
    <service id="Aws\RecycleBin\RecycleBinClient" alias="aws.recyclebin"/>
    <service id="Aws\RDSDataService\RDSDataServiceClient" alias="aws.rdsdataservice"/>
    <service id="Aws\Rds\RdsClient" alias="aws.rds"/>
    <service id="Aws\RedshiftDataAPIService\RedshiftDataAPIServiceClient" alias="aws.redshiftdataapiservice"/>
    <service id="Aws\Redshift\RedshiftClient" alias="aws.redshift"/>
    <service id="Aws\RedshiftServerless\RedshiftServerlessClient" alias="aws.redshiftserverless"/>
    <service id="Aws\Rekognition\RekognitionClient" alias="aws.rekognition"/>
    <service id="Aws\ResilienceHub\ResilienceHubClient" alias="aws.resiliencehub"/>
    <service id="Aws\ResourceGroups\ResourceGroupsClient" alias="aws.resourcegroups"/>
    <service id="Aws\ResourceGroupsTaggingAPI\ResourceGroupsTaggingAPIClient" alias="aws.resourcegroupstaggingapi"/>
    <service id="Aws\RoboMaker\RoboMakerClient" alias="aws.robomaker"/>
    <service id="Aws\Route53RecoveryCluster\Route53RecoveryClusterClient" alias="aws.route53recoverycluster"/>
    <service id="Aws\Route53RecoveryControlConfig\Route53RecoveryControlConfigClient" alias="aws.route53recoverycontrolconfig"/>
    <service id="Aws\Route53RecoveryReadiness\Route53RecoveryReadinessClient" alias="aws.route53recoveryreadiness"/>
    <service id="Aws\Route53\Route53Client" alias="aws.route53"/>
    <service id="Aws\Route53Domains\Route53DomainsClient" alias="aws.route53domains"/>
    <service id="Aws\Route53Resolver\Route53ResolverClient" alias="aws.route53resolver"/>
    <service id="Aws\CloudWatchRUM\CloudWatchRUMClient" alias="aws.cloudwatchrum"/>
    <service id="Aws\LexRuntimeV2\LexRuntimeV2Client" alias="aws.lexruntimev2"/>
    <service id="Aws\LexRuntimeService\LexRuntimeServiceClient" alias="aws.lexruntimeservice"/>
    <service id="Aws\SageMakerRuntime\SageMakerRuntimeClient" alias="aws.sagemakerruntime"/>
    <service id="Aws\S3\S3Client" alias="aws.s3"/>
    <service id="Aws\S3Control\S3ControlClient" alias="aws.s3control"/>
    <service id="Aws\S3Outposts\S3OutpostsClient" alias="aws.s3outposts"/>
    <service id="Aws\AugmentedAIRuntime\AugmentedAIRuntimeClient" alias="aws.augmentedairuntime"/>
    <service id="Aws\SagemakerEdgeManager\SagemakerEdgeManagerClient" alias="aws.sagemakeredgemanager"/>
    <service id="Aws\SageMakerFeatureStoreRuntime\SageMakerFeatureStoreRuntimeClient" alias="aws.sagemakerfeaturestoreruntime"/>
    <service id="Aws\SageMaker\SageMakerClient" alias="aws.sagemaker"/>
    <service id="Aws\SavingsPlans\SavingsPlansClient" alias="aws.savingsplans"/>
    <service id="Aws\Schemas\SchemasClient" alias="aws.schemas"/>
    <service id="Aws\SecretsManager\SecretsManagerClient" alias="aws.secretsmanager"/>
    <service id="Aws\SecurityHub\SecurityHubClient" alias="aws.securityhub"/>
    <service id="Aws\ServerlessApplicationRepository\ServerlessApplicationRepositoryClient" alias="aws.serverlessapplicationrepository"/>
    <service id="Aws\ServiceQuotas\ServiceQuotasClient" alias="aws.servicequotas"/>
    <service id="Aws\AppRegistry\AppRegistryClient" alias="aws.appregistry"/>
    <service id="Aws\ServiceCatalog\ServiceCatalogClient" alias="aws.servicecatalog"/>
    <service id="Aws\ServiceDiscovery\ServiceDiscoveryClient" alias="aws.servicediscovery"/>
    <service id="Aws\SesV2\SesV2Client" alias="aws.sesv2"/>
    <service id="Aws\Shield\ShieldClient" alias="aws.shield"/>
    <service id="Aws\signer\signerClient" alias="aws.signer"/>
    <service id="Aws\PinpointSMSVoice\PinpointSMSVoiceClient" alias="aws.pinpointsmsvoice"/>
    <service id="Aws\Sms\SmsClient" alias="aws.sms"/>
    <service id="Aws\SnowDeviceManagement\SnowDeviceManagementClient" alias="aws.snowdevicemanagement"/>
    <service id="Aws\SnowBall\SnowBallClient" alias="aws.snowball"/>
    <service id="Aws\Sns\SnsClient" alias="aws.sns"/>
    <service id="Aws\Sqs\SqsClient" alias="aws.sqs"/>
    <service id="Aws\SSMContacts\SSMContactsClient" alias="aws.ssmcontacts"/>
    <service id="Aws\SSMIncidents\SSMIncidentsClient" alias="aws.ssmincidents"/>
    <service id="Aws\Ssm\SsmClient" alias="aws.ssm"/>
    <service id="Aws\SSOAdmin\SSOAdminClient" alias="aws.ssoadmin"/>
    <service id="Aws\SSOOIDC\SSOOIDCClient" alias="aws.ssooidc"/>
    <service id="Aws\SSO\SSOClient" alias="aws.sso"/>
    <service id="Aws\Sfn\SfnClient" alias="aws.sfn"/>
    <service id="Aws\StorageGateway\StorageGatewayClient" alias="aws.storagegateway"/>
    <service id="Aws\DynamoDbStreams\DynamoDbStreamsClient" alias="aws.dynamodbstreams"/>
    <service id="Aws\Sts\StsClient" alias="aws.sts"/>
    <service id="Aws\Support\SupportClient" alias="aws.support"/>
    <service id="Aws\Swf\SwfClient" alias="aws.swf"/>
    <service id="Aws\Synthetics\SyntheticsClient" alias="aws.synthetics"/>
    <service id="Aws\Textract\TextractClient" alias="aws.textract"/>
    <service id="Aws\TimestreamQuery\TimestreamQueryClient" alias="aws.timestreamquery"/>
    <service id="Aws\TimestreamWrite\TimestreamWriteClient" alias="aws.timestreamwrite"/>
    <service id="Aws\TranscribeService\TranscribeServiceClient" alias="aws.transcribeservice"/>
    <service id="Aws\Transfer\TransferClient" alias="aws.transfer"/>
    <service id="Aws\Translate\TranslateClient" alias="aws.translate"/>
    <service id="Aws\VoiceID\VoiceIDClient" alias="aws.voiceid"/>
    <service id="Aws\WafRegional\WafRegionalClient" alias="aws.wafregional"/>
    <service id="Aws\Waf\WafClient" alias="aws.waf"/>
    <service id="Aws\WAFV2\WAFV2Client" alias="aws.wafv2"/>
    <service id="Aws\WellArchitected\WellArchitectedClient" alias="aws.wellarchitected"/>
    <service id="Aws\ConnectWisdomService\ConnectWisdomServiceClient" alias="aws.connectwisdomservice"/>
    <service id="Aws\WorkDocs\WorkDocsClient" alias="aws.workdocs"/>
    <service id="Aws\WorkLink\WorkLinkClient" alias="aws.worklink"/>
    <service id="Aws\WorkMail\WorkMailClient" alias="aws.workmail"/>
    <service id="Aws\WorkMailMessageFlow\WorkMailMessageFlowClient" alias="aws.workmailmessageflow"/>
    <service id="Aws\WorkSpacesWeb\WorkSpacesWebClient" alias="aws.workspacesweb"/>
    <service id="Aws\WorkSpaces\WorkSpacesClient" alias="aws.workspaces"/>
    <service id="Aws\XRay\XRayClient" alias="aws.xray"/>
    <service id="Knp\Snappy\Pdf" alias="knp_snappy.pdf"/>
    <service id="Knp\Snappy\Image" alias="knp_snappy.image"/>
    <service id="Twig_Environment" alias="twig" public="false"/>
    <service id="Twig\Environment" alias="twig" public="false"/>
    <service id="container.env_var_processors_locator" alias=".service_locator.CmORmuK" public="true"/>
    <service id="twig.loader.filesystem" alias="twig.loader.native_filesystem" public="false"/>
    <service id="argument_resolver.controller_locator" alias=".service_locator.lu7FCdF"/>
    <service id="twig.loader" alias="twig.loader.native_filesystem"/>
    <service id="Psr\Log\LoggerInterface" alias="logger" public="false"/>
    <service id=".service_locator.BgI5J6G" alias="messenger.retry_strategy_locator" public="false"/>
    <service id="twig.error_renderer.html.inner" alias="error_handler.error_renderer.html" public="false"/>
  </services>
</container>
